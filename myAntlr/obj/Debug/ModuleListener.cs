//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-dazou\Documents\Visual Studio 2012\Projects\myAntlr\myAntlr\Module.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace myAntlr {



using System;

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ModuleParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IModuleListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarator([NotNull] ModuleParser.DeclaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarator([NotNull] ModuleParser.DeclaratorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.template_decl_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplate_decl_start([NotNull] ModuleParser.Template_decl_startContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.template_decl_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplate_decl_start([NotNull] ModuleParser.Template_decl_startContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_decl_specifiers([NotNull] ModuleParser.Function_decl_specifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_decl_specifiers([NotNull] ModuleParser.Function_decl_specifiersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.type_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_suffix([NotNull] ModuleParser.Type_suffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.type_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_suffix([NotNull] ModuleParser.Type_suffixContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_argument_list([NotNull] ModuleParser.Function_argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_argument_list([NotNull] ModuleParser.Function_argument_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.cndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCndExpr([NotNull] ModuleParser.CndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.cndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCndExpr([NotNull] ModuleParser.CndExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicative_expression([NotNull] ModuleParser.Multiplicative_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicative_expression([NotNull] ModuleParser.Multiplicative_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompound_statement([NotNull] ModuleParser.Compound_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompound_statement([NotNull] ModuleParser.Compound_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_squares_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_squares_or_semicolon([NotNull] ModuleParser.No_squares_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_squares_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_squares_or_semicolon([NotNull] ModuleParser.No_squares_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assign_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_expr([NotNull] ModuleParser.Assign_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assign_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_expr([NotNull] ModuleParser.Assign_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast_expression([NotNull] ModuleParser.Cast_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast_expression([NotNull] ModuleParser.Cast_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_angle_brackets_or_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_angle_brackets_or_brackets([NotNull] ModuleParser.No_angle_brackets_or_bracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_angle_brackets_or_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_angle_brackets_or_brackets([NotNull] ModuleParser.No_angle_brackets_or_bracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality_expression([NotNull] ModuleParser.Equality_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality_expression([NotNull] ModuleParser.Equality_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.parameter_decl_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_decl_clause([NotNull] ModuleParser.Parameter_decl_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.parameter_decl_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_decl_clause([NotNull] ModuleParser.Parameter_decl_clauseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_comma_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_comma_or_semicolon([NotNull] ModuleParser.No_comma_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_comma_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_comma_or_semicolon([NotNull] ModuleParser.No_comma_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.memberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccess([NotNull] ModuleParser.MemberAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.memberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccess([NotNull] ModuleParser.MemberAccessContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.base_class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_class([NotNull] ModuleParser.Base_classContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.base_class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_class([NotNull] ModuleParser.Base_classContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_name([NotNull] ModuleParser.Function_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_name([NotNull] ModuleParser.Function_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.parameter_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_name([NotNull] ModuleParser.Parameter_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.parameter_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_name([NotNull] ModuleParser.Parameter_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ctor_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCtor_list([NotNull] ModuleParser.Ctor_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ctor_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCtor_list([NotNull] ModuleParser.Ctor_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.access_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccess_specifier([NotNull] ModuleParser.Access_specifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.access_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccess_specifier([NotNull] ModuleParser.Access_specifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ctor_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCtor_expr([NotNull] ModuleParser.Ctor_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ctor_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCtor_expr([NotNull] ModuleParser.Ctor_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.init_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInit_declarator_list([NotNull] ModuleParser.Init_declarator_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.init_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInit_declarator_list([NotNull] ModuleParser.Init_declarator_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assign_water_l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_water_l2([NotNull] ModuleParser.Assign_water_l2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assign_water_l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_water_l2([NotNull] ModuleParser.Assign_water_l2Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.init_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInit_declarator([NotNull] ModuleParser.Init_declaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.init_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInit_declarator([NotNull] ModuleParser.Init_declaratorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayIndexing([NotNull] ModuleParser.ArrayIndexingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayIndexing([NotNull] ModuleParser.ArrayIndexingContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.parameter_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_decl([NotNull] ModuleParser.Parameter_declContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.parameter_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_decl([NotNull] ModuleParser.Parameter_declContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] ModuleParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] ModuleParser.NumberContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_type([NotNull] ModuleParser.Base_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_type([NotNull] ModuleParser.Base_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.return_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_type([NotNull] ModuleParser.Return_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.return_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_type([NotNull] ModuleParser.Return_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode([NotNull] ModuleParser.CodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode([NotNull] ModuleParser.CodeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ctor_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCtor_initializer([NotNull] ModuleParser.Ctor_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ctor_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCtor_initializer([NotNull] ModuleParser.Ctor_initializerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExclusive_or_expression([NotNull] ModuleParser.Exclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExclusive_or_expression([NotNull] ModuleParser.Exclusive_or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assign_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_expr_w_([NotNull] ModuleParser.Assign_expr_w_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assign_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_expr_w_([NotNull] ModuleParser.Assign_expr_w_Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.param_type_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type_id([NotNull] ModuleParser.Param_type_idContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.param_type_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type_id([NotNull] ModuleParser.Param_type_idContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ptrMemberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrMemberAccess([NotNull] ModuleParser.PtrMemberAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ptrMemberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrMemberAccess([NotNull] ModuleParser.PtrMemberAccessContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer_list([NotNull] ModuleParser.Initializer_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer_list([NotNull] ModuleParser.Initializer_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditive_expression([NotNull] ModuleParser.Additive_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditive_expression([NotNull] ModuleParser.Additive_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_squares([NotNull] ModuleParser.No_squaresContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_squares([NotNull] ModuleParser.No_squaresContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_operator([NotNull] ModuleParser.Unary_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_operator([NotNull] ModuleParser.Unary_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.declByClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclByClass([NotNull] ModuleParser.DeclByClassContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.declByClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclByClass([NotNull] ModuleParser.DeclByClassContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_expression([NotNull] ModuleParser.Shift_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_expression([NotNull] ModuleParser.Shift_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.normOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNormOr([NotNull] ModuleParser.NormOrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.normOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNormOr([NotNull] ModuleParser.NormOrContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.@sizeof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof([NotNull] ModuleParser.SizeofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.@sizeof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof([NotNull] ModuleParser.SizeofContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_name([NotNull] ModuleParser.Type_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_name([NotNull] ModuleParser.Type_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_brackets_curlies_or_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets_curlies_or_squares([NotNull] ModuleParser.No_brackets_curlies_or_squaresContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_brackets_curlies_or_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets_curlies_or_squares([NotNull] ModuleParser.No_brackets_curlies_or_squaresContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.sizeof_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_expression([NotNull] ModuleParser.Sizeof_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.sizeof_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_expression([NotNull] ModuleParser.Sizeof_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] ModuleParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] ModuleParser.IdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.unary_op_and_cast_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_op_and_cast_expr([NotNull] ModuleParser.Unary_op_and_cast_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.unary_op_and_cast_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_op_and_cast_expr([NotNull] ModuleParser.Unary_op_and_cast_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] ModuleParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] ModuleParser.FuncCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.primaryOnly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryOnly([NotNull] ModuleParser.PrimaryOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.primaryOnly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryOnly([NotNull] ModuleParser.PrimaryOnlyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.sizeof_operand2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_operand2([NotNull] ModuleParser.Sizeof_operand2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.sizeof_operand2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_operand2([NotNull] ModuleParser.Sizeof_operand2Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInclusive_or_expression([NotNull] ModuleParser.Inclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInclusive_or_expression([NotNull] ModuleParser.Inclusive_or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_param_list([NotNull] ModuleParser.Function_param_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_param_list([NotNull] ModuleParser.Function_param_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_brackets_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets_or_semicolon([NotNull] ModuleParser.No_brackets_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_brackets_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets_or_semicolon([NotNull] ModuleParser.No_brackets_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.base_classes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_classes([NotNull] ModuleParser.Base_classesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.base_classes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_classes([NotNull] ModuleParser.Base_classesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.incDecOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncDecOp([NotNull] ModuleParser.IncDecOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.incDecOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncDecOp([NotNull] ModuleParser.IncDecOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_curlies"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_curlies([NotNull] ModuleParser.No_curliesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_curlies"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_curlies([NotNull] ModuleParser.No_curliesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.equality_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality_operator([NotNull] ModuleParser.Equality_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.equality_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality_operator([NotNull] ModuleParser.Equality_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.param_type_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type_list([NotNull] ModuleParser.Param_type_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.param_type_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type_list([NotNull] ModuleParser.Param_type_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] ModuleParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] ModuleParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.class_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_name([NotNull] ModuleParser.Class_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.class_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_name([NotNull] ModuleParser.Class_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_expression([NotNull] ModuleParser.Relational_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_expression([NotNull] ModuleParser.Relational_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.simple_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple_decl([NotNull] ModuleParser.Simple_declContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.simple_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple_decl([NotNull] ModuleParser.Simple_declContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.param_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_decl_specifiers([NotNull] ModuleParser.Param_decl_specifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.param_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_decl_specifiers([NotNull] ModuleParser.Param_decl_specifiersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment_operator([NotNull] ModuleParser.Assignment_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment_operator([NotNull] ModuleParser.Assignment_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.param_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type([NotNull] ModuleParser.Param_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.param_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type([NotNull] ModuleParser.Param_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.type_id_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_id_list([NotNull] ModuleParser.Type_id_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.type_id_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_id_list([NotNull] ModuleParser.Type_id_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_argument([NotNull] ModuleParser.Function_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_argument([NotNull] ModuleParser.Function_argumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_expression([NotNull] ModuleParser.Unary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_expression([NotNull] ModuleParser.Unary_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ptrs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrs([NotNull] ModuleParser.PtrsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ptrs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrs([NotNull] ModuleParser.PtrsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.constant_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant_expr_w_([NotNull] ModuleParser.Constant_expr_w_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.constant_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant_expr_w_([NotNull] ModuleParser.Constant_expr_w_Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWater([NotNull] ModuleParser.WaterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWater([NotNull] ModuleParser.WaterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr_expression([NotNull] ModuleParser.Or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr_expression([NotNull] ModuleParser.Or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] ModuleParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] ModuleParser.ConstantContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assign_expr_w__l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_expr_w__l2([NotNull] ModuleParser.Assign_expr_w__l2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assign_expr_w__l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_expr_w__l2([NotNull] ModuleParser.Assign_expr_w__l2Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.function_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_def([NotNull] ModuleParser.Function_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.function_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_def([NotNull] ModuleParser.Function_defContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsing_directive([NotNull] ModuleParser.Using_directiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsing_directive([NotNull] ModuleParser.Using_directiveContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.relational_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_operator([NotNull] ModuleParser.Relational_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.relational_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_operator([NotNull] ModuleParser.Relational_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.ptr_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtr_operator([NotNull] ModuleParser.Ptr_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.ptr_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtr_operator([NotNull] ModuleParser.Ptr_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.@operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator([NotNull] ModuleParser.OperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.@operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator([NotNull] ModuleParser.OperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.class_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_def([NotNull] ModuleParser.Class_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.class_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_def([NotNull] ModuleParser.Class_defContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.initializer_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer_id([NotNull] ModuleParser.Initializer_idContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.initializer_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer_id([NotNull] ModuleParser.Initializer_idContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.inc_dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInc_dec([NotNull] ModuleParser.Inc_decContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.inc_dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInc_dec([NotNull] ModuleParser.Inc_decContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd_expression([NotNull] ModuleParser.And_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd_expression([NotNull] ModuleParser.And_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary_expression([NotNull] ModuleParser.Primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary_expression([NotNull] ModuleParser.Primary_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.exception_specification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterException_specification([NotNull] ModuleParser.Exception_specificationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.exception_specification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitException_specification([NotNull] ModuleParser.Exception_specificationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.template_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplate_param_list([NotNull] ModuleParser.Template_param_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.template_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplate_param_list([NotNull] ModuleParser.Template_param_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.declByType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclByType([NotNull] ModuleParser.DeclByTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.declByType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclByType([NotNull] ModuleParser.DeclByTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.parameter_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_id([NotNull] ModuleParser.Parameter_idContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.parameter_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_id([NotNull] ModuleParser.Parameter_idContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.sizeof_operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_operand([NotNull] ModuleParser.Sizeof_operandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.sizeof_operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_operand([NotNull] ModuleParser.Sizeof_operandContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.no_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets([NotNull] ModuleParser.No_bracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.no_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets([NotNull] ModuleParser.No_bracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.bit_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBit_and_expression([NotNull] ModuleParser.Bit_and_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.bit_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBit_and_expression([NotNull] ModuleParser.Bit_and_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer([NotNull] ModuleParser.InitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer([NotNull] ModuleParser.InitializerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.assign_water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_water([NotNull] ModuleParser.Assign_waterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.assign_water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_water([NotNull] ModuleParser.Assign_waterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ModuleParser.cast_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast_target([NotNull] ModuleParser.Cast_targetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModuleParser.cast_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast_target([NotNull] ModuleParser.Cast_targetContext context);
}
} // namespace myAntlr
