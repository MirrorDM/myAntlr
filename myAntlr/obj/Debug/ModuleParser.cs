//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\work\myAntlr\myAntlr\Module.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace myAntlr {



using System;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ModuleParser : Parser {
	public const int
		T__55=1, T__54=2, T__53=3, T__52=4, T__51=5, T__50=6, T__49=7, T__48=8, 
		T__47=9, T__46=10, T__45=11, T__44=12, T__43=13, T__42=14, T__41=15, T__40=16, 
		T__39=17, T__38=18, T__37=19, T__36=20, T__35=21, T__34=22, T__33=23, 
		T__32=24, T__31=25, T__30=26, T__29=27, T__28=28, T__27=29, T__26=30, 
		T__25=31, T__24=32, T__23=33, T__22=34, T__21=35, T__20=36, T__19=37, 
		T__18=38, T__17=39, T__16=40, T__15=41, T__14=42, T__13=43, T__12=44, 
		T__11=45, T__10=46, T__9=47, T__8=48, T__7=49, T__6=50, T__5=51, T__4=52, 
		T__3=53, T__2=54, T__1=55, T__0=56, IF=57, ELSE=58, FOR=59, WHILE=60, 
		BREAK=61, CASE=62, CONTINUE=63, SWITCH=64, DO=65, GOTO=66, RETURN=67, 
		TYPEDEF=68, VOID=69, UNSIGNED=70, SIGNED=71, LONG=72, CV_QUALIFIER=73, 
		VIRTUAL=74, TRY=75, CATCH=76, THROW=77, USING=78, NAMESPACE=79, AUTO=80, 
		REGISTER=81, OPERATOR=82, TEMPLATE=83, CLASS_KEY=84, ALPHA_NUMERIC=85, 
		OPENING_CURLY=86, CLOSING_CURLY=87, PRE_IF=88, PRE_ELSE=89, PRE_ENDIF=90, 
		HEX_LITERAL=91, DECIMAL_LITERAL=92, OCTAL_LITERAL=93, FLOATING_POINT_LITERAL=94, 
		CHAR=95, STRING=96, COMMENT=97, WHITESPACE=98, CPPCOMMENT=99, OTHER=100;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'&'", "'*'", "'['", "'<'", "'--'", "'!='", "'<='", "'<<'", 
		"'->'", "'%'", "'*='", "')'", "'explicit'", "'inline'", "'::'", "'='", 
		"'|='", "'new'", "'|'", "'!'", "'sizeof'", "']'", "'<<='", "'-='", "'->*'", 
		"'public'", "','", "'-'", "':'", "'('", "'&='", "'private'", "'?'", "'>>='", 
		"'...'", "'+='", "'^='", "'friend'", "'static'", "'++'", "'>>'", "'delete'", 
		"'^'", "'.'", "'+'", "'protected'", "';'", "'&&'", "'||'", "'>'", "'%='", 
		"'/='", "'/'", "'=='", "'~'", "'>='", "'if'", "'else'", "'for'", "'while'", 
		"'break'", "'case'", "'continue'", "'switch'", "'do'", "'goto'", "'return'", 
		"'typedef'", "'void'", "'unsigned'", "'signed'", "'long'", "CV_QUALIFIER", 
		"'virtual'", "'try'", "'catch'", "'throw'", "'using'", "'namespace'", 
		"'auto'", "'register'", "'operator'", "'template'", "CLASS_KEY", "ALPHA_NUMERIC", 
		"'{'", "'}'", "PRE_IF", "PRE_ELSE", "PRE_ENDIF", "HEX_LITERAL", "DECIMAL_LITERAL", 
		"OCTAL_LITERAL", "FLOATING_POINT_LITERAL", "CHAR", "STRING", "COMMENT", 
		"WHITESPACE", "CPPCOMMENT", "OTHER"
	};
	public const int
		RULE_code = 0, RULE_using_directive = 1, RULE_expr = 2, RULE_assign_expr = 3, 
		RULE_conditional_expression = 4, RULE_or_expression = 5, RULE_and_expression = 6, 
		RULE_inclusive_or_expression = 7, RULE_exclusive_or_expression = 8, RULE_bit_and_expression = 9, 
		RULE_equality_expression = 10, RULE_relational_expression = 11, RULE_shift_expression = 12, 
		RULE_additive_expression = 13, RULE_multiplicative_expression = 14, RULE_cast_expression = 15, 
		RULE_cast_target = 16, RULE_unary_expression = 17, RULE_unary_op_and_cast_expr = 18, 
		RULE_sizeof_expression = 19, RULE_sizeof = 20, RULE_sizeof_operand = 21, 
		RULE_sizeof_operand2 = 22, RULE_inc_dec = 23, RULE_postfix_expression = 24, 
		RULE_function_argument_list = 25, RULE_function_argument = 26, RULE_primary_expression = 27, 
		RULE_unary_operator = 28, RULE_relational_operator = 29, RULE_constant = 30, 
		RULE_function_decl_specifiers = 31, RULE_ptr_operator = 32, RULE_access_specifier = 33, 
		RULE_operator = 34, RULE_assignment_operator = 35, RULE_equality_operator = 36, 
		RULE_template_decl_start = 37, RULE_template_param_list = 38, RULE_no_brackets = 39, 
		RULE_no_brackets_curlies_or_squares = 40, RULE_no_brackets_or_semicolon = 41, 
		RULE_no_angle_brackets_or_brackets = 42, RULE_no_curlies = 43, RULE_no_squares = 44, 
		RULE_no_squares_or_semicolon = 45, RULE_no_comma_or_semicolon = 46, RULE_assign_water = 47, 
		RULE_assign_water_l2 = 48, RULE_water = 49, RULE_function_def = 50, RULE_return_type = 51, 
		RULE_function_param_list = 52, RULE_parameter_decl_clause = 53, RULE_parameter_decl = 54, 
		RULE_parameter_id = 55, RULE_compound_statement = 56, RULE_ctor_list = 57, 
		RULE_ctor_initializer = 58, RULE_initializer_id = 59, RULE_ctor_expr = 60, 
		RULE_function_name = 61, RULE_exception_specification = 62, RULE_type_id_list = 63, 
		RULE_init_declarator = 64, RULE_declarator = 65, RULE_type_suffix = 66, 
		RULE_assign_expr_w_ = 67, RULE_assign_expr_w__l2 = 68, RULE_constant_expr_w_ = 69, 
		RULE_simple_decl = 70, RULE_var_decl = 71, RULE_init_declarator_list = 72, 
		RULE_initializer = 73, RULE_initializer_list = 74, RULE_class_def = 75, 
		RULE_class_name = 76, RULE_base_classes = 77, RULE_base_class = 78, RULE_type_name = 79, 
		RULE_base_type = 80, RULE_param_decl_specifiers = 81, RULE_parameter_name = 82, 
		RULE_param_type_list = 83, RULE_param_type = 84, RULE_param_type_id = 85, 
		RULE_identifier = 86, RULE_number = 87, RULE_ptrs = 88;
	public static readonly string[] ruleNames = {
		"code", "using_directive", "expr", "assign_expr", "conditional_expression", 
		"or_expression", "and_expression", "inclusive_or_expression", "exclusive_or_expression", 
		"bit_and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"cast_expression", "cast_target", "unary_expression", "unary_op_and_cast_expr", 
		"sizeof_expression", "sizeof", "sizeof_operand", "sizeof_operand2", "inc_dec", 
		"postfix_expression", "function_argument_list", "function_argument", "primary_expression", 
		"unary_operator", "relational_operator", "constant", "function_decl_specifiers", 
		"ptr_operator", "access_specifier", "operator", "assignment_operator", 
		"equality_operator", "template_decl_start", "template_param_list", "no_brackets", 
		"no_brackets_curlies_or_squares", "no_brackets_or_semicolon", "no_angle_brackets_or_brackets", 
		"no_curlies", "no_squares", "no_squares_or_semicolon", "no_comma_or_semicolon", 
		"assign_water", "assign_water_l2", "water", "function_def", "return_type", 
		"function_param_list", "parameter_decl_clause", "parameter_decl", "parameter_id", 
		"compound_statement", "ctor_list", "ctor_initializer", "initializer_id", 
		"ctor_expr", "function_name", "exception_specification", "type_id_list", 
		"init_declarator", "declarator", "type_suffix", "assign_expr_w_", "assign_expr_w__l2", 
		"constant_expr_w_", "simple_decl", "var_decl", "init_declarator_list", 
		"initializer", "initializer_list", "class_def", "class_name", "base_classes", 
		"base_class", "type_name", "base_type", "param_decl_specifiers", "parameter_name", 
		"param_type_list", "param_type", "param_type_id", "identifier", "number", 
		"ptrs"
	};

	public override string GrammarFileName { get { return "Module.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	public bool skipToEndOfObject()
	{
	    Stack<Object> CurlyStack = new Stack<Object>();
	    Object o = new Object();
	    int t = _input.La(1);

	    while (t != -1 && !(CurlyStack.Count == 0 && t == CLOSING_CURLY))
	    {
	        if (t == PRE_ELSE)
	        {
	            Stack<Object> ifdefStack = new Stack<Object>();
	            Consume();
	            t = _input.La(1);

	            while (t != -1 && !(ifdefStack.Count == 0 && (t == PRE_ENDIF)))
	            {
	                if (t == PRE_IF)
	                {
	                    ifdefStack.Push(o);
	                }
	                else if (t == PRE_ENDIF)
	                {
	                    ifdefStack.Pop();
	                }
	                Consume();
	                t = _input.La(1);
	            }
	        }

	        if (t == OPENING_CURLY)
	        {
	            CurlyStack.Push(o);
	        }
	        else if (t == CLOSING_CURLY)
	        {
	            CurlyStack.Pop();
	        }
	        Consume();
	        t = _input.La(1);
	    }
	    if (t != -1)
	    {
	        Consume();
	    }
	    return true;
	}

	// this should go into FunctionGrammar but ANTLR fails
	// to join the parser::members-section on inclusion

	public bool preProcSkipToEnd()
	{
	    Stack<Object> CurlyStack = new Stack<Object>();
	    Object o = new Object();
	    int t = _input.La(1);

	    while (t != -1 && !(CurlyStack.Count == 0 && t == PRE_ENDIF))
	    {
	        if (t == PRE_IF)
	        {
	            CurlyStack.Push(o);
	        }
	        else if (t == PRE_ENDIF)
	        {
	            CurlyStack.Pop();
	        }
	        Consume();
	        t = _input.La(1);
	    }
	    if (t != -1)
	    {
	        Consume();
	    }

	    return true;
	}

	public ModuleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public IReadOnlyList<WaterContext> water() {
			return GetRuleContexts<WaterContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Simple_declContext simple_decl(int i) {
			return GetRuleContext<Simple_declContext>(i);
		}
		public IReadOnlyList<Simple_declContext> simple_decl() {
			return GetRuleContexts<Simple_declContext>();
		}
		public IReadOnlyList<Function_defContext> function_def() {
			return GetRuleContexts<Function_defContext>();
		}
		public Function_defContext function_def(int i) {
			return GetRuleContext<Function_defContext>(i);
		}
		public WaterContext water(int i) {
			return GetRuleContext<WaterContext>(i);
		}
		public IReadOnlyList<Using_directiveContext> using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_code; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 12) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				State = 182;
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 178; function_def();
					}
					break;

				case 2:
					{
					State = 179; simple_decl();
					}
					break;

				case 3:
					{
					State = 180; using_directive();
					}
					break;

				case 4:
					{
					State = 181; water();
					}
					break;
				}
				}
				State = 186;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(ModuleParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode NAMESPACE() { return GetToken(ModuleParser.NAMESPACE, 0); }
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_using_directive; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_using_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(USING);
			State = 188; Match(NAMESPACE);
			State = 189; identifier();
			State = 190; Match(47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; assign_expr();
			State = 195;
			_la = _input.La(1);
			if (_la==27) {
				{
				State = 193; Match(27);
				State = 194; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_exprContext : ParserRuleContext {
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Assign_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssign_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssign_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_exprContext assign_expr() {
		Assign_exprContext _localctx = new Assign_exprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_assign_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; conditional_expression();
			State = 201;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 11) | (1L << 16) | (1L << 17) | (1L << 23) | (1L << 24) | (1L << 31) | (1L << 34) | (1L << 36) | (1L << 37) | (1L << 51) | (1L << 52))) != 0)) {
				{
				State = 198; assignment_operator();
				State = 199; assign_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditional_expression; }
	 
		public Conditional_expressionContext() { }
		public virtual void CopyFrom(Conditional_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormOrContext : Conditional_expressionContext {
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public NormOrContext(Conditional_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNormOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNormOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CndExprContext : Conditional_expressionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public CndExprContext(Conditional_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_conditional_expression);
		try {
			State = 210;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				_localctx = new NormOrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; or_expression();
				}
				break;

			case 2:
				_localctx = new CndExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; or_expression();
				{
				State = 205; Match(33);
				State = 206; expr();
				State = 207; Match(29);
				State = 208; conditional_expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; and_expression();
			State = 215;
			_la = _input.La(1);
			if (_la==49) {
				{
				State = 213; Match(49);
				State = 214; or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_and_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; inclusive_or_expression();
			State = 220;
			_la = _input.La(1);
			if (_la==48) {
				{
				State = 218; Match(48);
				State = 219; and_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_inclusive_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; exclusive_or_expression();
			State = 225;
			_la = _input.La(1);
			if (_la==19) {
				{
				State = 223; Match(19);
				State = 224; inclusive_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_exclusive_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; bit_and_expression();
			State = 230;
			_la = _input.La(1);
			if (_la==43) {
				{
				State = 228; Match(43);
				State = 229; exclusive_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bit_and_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterBit_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitBit_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBit_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_bit_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; equality_expression();
			State = 235;
			_la = _input.La(1);
			if (_la==1) {
				{
				State = 233; Match(1);
				State = 234; bit_and_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public Equality_operatorContext equality_operator() {
			return GetRuleContext<Equality_operatorContext>(0);
		}
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_equality_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; relational_expression();
			State = 241;
			_la = _input.La(1);
			if (_la==6 || _la==54) {
				{
				State = 238; equality_operator();
				State = 239; equality_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relational_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; shift_expression();
			State = 247;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 7) | (1L << 50) | (1L << 56))) != 0)) {
				{
				State = 244; relational_operator();
				State = 245; relational_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shift_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; additive_expression();
			State = 252;
			_la = _input.La(1);
			if (_la==8 || _la==41) {
				{
				State = 250;
				_la = _input.La(1);
				if ( !(_la==8 || _la==41) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 251; shift_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_additive_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; multiplicative_expression();
			State = 257;
			_la = _input.La(1);
			if (_la==28 || _la==45) {
				{
				State = 255;
				_la = _input.La(1);
				if ( !(_la==28 || _la==45) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 256; additive_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multiplicative_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; cast_expression();
			State = 262;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 53))) != 0)) {
				{
				State = 260;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 53))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 261; multiplicative_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Cast_targetContext cast_target() {
			return GetRuleContext<Cast_targetContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cast_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_cast_expression);
		try {
			State = 270;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 264; Match(30);
				State = 265; cast_target();
				State = 266; Match(12);
				State = 267; cast_expression();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_targetContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cast_target; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCast_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCast_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_targetContext cast_target() {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_cast_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; type_name();
			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==2) {
				{
				{
				State = 273; ptr_operator();
				}
				}
				State = 278;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return GetRuleContext<Sizeof_expressionContext>(0);
		}
		public Inc_decContext inc_dec() {
			return GetRuleContext<Inc_decContext>(0);
		}
		public Unary_op_and_cast_exprContext unary_op_and_cast_expr() {
			return GetRuleContext<Unary_op_and_cast_exprContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_unary_expression);
		try {
			State = 285;
			switch (_input.La(1)) {
			case 5:
			case 40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; inc_dec();
				State = 280; cast_expression();
				}
				break;
			case 1:
			case 2:
			case 20:
			case 28:
			case 45:
			case 55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; unary_op_and_cast_expr();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283; sizeof_expression();
				}
				break;
			case 26:
			case 30:
			case 32:
			case 46:
			case ALPHA_NUMERIC:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 284; postfix_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_op_and_cast_exprContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_op_and_cast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_op_and_cast_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterUnary_op_and_cast_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitUnary_op_and_cast_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_op_and_cast_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_op_and_cast_exprContext unary_op_and_cast_expr() {
		Unary_op_and_cast_exprContext _localctx = new Unary_op_and_cast_exprContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_unary_op_and_cast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; unary_operator();
			State = 288; cast_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_expressionContext : ParserRuleContext {
		public Sizeof_operand2Context sizeof_operand2() {
			return GetRuleContext<Sizeof_operand2Context>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public Sizeof_operandContext sizeof_operand() {
			return GetRuleContext<Sizeof_operandContext>(0);
		}
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterSizeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitSizeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_expressionContext sizeof_expression() {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_sizeof_expression);
		try {
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; @sizeof();
				State = 291; Match(30);
				State = 292; sizeof_operand();
				State = 293; Match(12);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; @sizeof();
				State = 296; sizeof_operand2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_operandContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public Sizeof_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_operand; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterSizeof_operand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitSizeof_operand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_operandContext sizeof_operand() {
		Sizeof_operandContext _localctx = new Sizeof_operandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_sizeof_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; type_name();
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==2) {
				{
				{
				State = 303; ptr_operator();
				}
				}
				State = 308;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_operand2Context : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Sizeof_operand2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_operand2; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterSizeof_operand2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitSizeof_operand2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_operand2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_operand2Context sizeof_operand2() {
		Sizeof_operand2Context _localctx = new Sizeof_operand2Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_sizeof_operand2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inc_decContext : ParserRuleContext {
		public Inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_inc_dec; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInc_dec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInc_dec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInc_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inc_decContext inc_dec() {
		Inc_decContext _localctx = new Inc_decContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = _input.La(1);
			if ( !(_la==5 || _la==40) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_postfix_expression; }
	 
		public Postfix_expressionContext() { }
		public virtual void CopyFrom(Postfix_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryOnlyContext : Postfix_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public PrimaryOnlyContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterPrimaryOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitPrimaryOnly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PtrMemberAccessContext : Postfix_expressionContext {
		public ITerminalNode TEMPLATE() { return GetToken(ModuleParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public PtrMemberAccessContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterPtrMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitPtrMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexingContext : Postfix_expressionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public ArrayIndexingContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterArrayIndexing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitArrayIndexing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecOpContext : Postfix_expressionContext {
		public Inc_decContext inc_dec() {
			return GetRuleContext<Inc_decContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public IncDecOpContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterIncDecOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitIncDecOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : Postfix_expressionContext {
		public ITerminalNode TEMPLATE() { return GetToken(ModuleParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public MemberAccessContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : Postfix_expressionContext {
		public Function_argument_listContext function_argument_list() {
			return GetRuleContext<Function_argument_listContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public FuncCallContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		return postfix_expression(0);
	}

	private Postfix_expressionContext postfix_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Postfix_expressionContext _localctx = new Postfix_expressionContext(_ctx, _parentState);
		Postfix_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_postfix_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryOnlyContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 314; primary_expression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 342;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
					case 1:
						{
						_localctx = new ArrayIndexingContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 316;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 317; Match(3);
						State = 318; expr();
						State = 319; Match(22);
						}
						break;

					case 2:
						{
						_localctx = new FuncCallContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 321;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 322; Match(30);
						State = 323; function_argument_list();
						State = 324; Match(12);
						}
						break;

					case 3:
						{
						_localctx = new MemberAccessContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 326;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 327; Match(44);
						State = 329;
						_la = _input.La(1);
						if (_la==TEMPLATE) {
							{
							State = 328; Match(TEMPLATE);
							}
						}

						{
						State = 331; identifier();
						}
						}
						break;

					case 4:
						{
						_localctx = new PtrMemberAccessContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 332;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 333; Match(9);
						State = 335;
						_la = _input.La(1);
						if (_la==TEMPLATE) {
							{
							State = 334; Match(TEMPLATE);
							}
						}

						{
						State = 337; identifier();
						}
						}
						break;

					case 5:
						{
						_localctx = new IncDecOpContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 338;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 339; inc_dec();
						}
						break;
					}
					} 
				}
				State = 344;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_argument_listContext : ParserRuleContext {
		public Function_argumentContext function_argument(int i) {
			return GetRuleContext<Function_argumentContext>(i);
		}
		public IReadOnlyList<Function_argumentContext> function_argument() {
			return GetRuleContexts<Function_argumentContext>();
		}
		public Function_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_argument_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_listContext function_argument_list() {
		Function_argument_listContext _localctx = new Function_argument_listContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_function_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 40) | (1L << 45) | (1L << 46) | (1L << 55))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (ALPHA_NUMERIC - 85)) | (1L << (HEX_LITERAL - 85)) | (1L << (DECIMAL_LITERAL - 85)) | (1L << (OCTAL_LITERAL - 85)) | (1L << (FLOATING_POINT_LITERAL - 85)) | (1L << (CHAR - 85)) | (1L << (STRING - 85)))) != 0)) {
				{
				State = 345; function_argument();
				State = 350;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==27) {
					{
					{
					State = 346; Match(27);
					State = 347; function_argument();
					}
					}
					State = 352;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_argument; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_function_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; assign_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primary_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_primary_expression);
		try {
			State = 363;
			switch (_input.La(1)) {
			case 26:
			case 32:
			case 46:
			case ALPHA_NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; identifier();
				}
				break;
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; constant();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; Match(30);
				State = 360; expr();
				State = 361; Match(12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 20) | (1L << 28) | (1L << 45) | (1L << 55))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relational_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 7) | (1L << 50) | (1L << 56))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(ModuleParser.OCTAL_LITERAL, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(ModuleParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(ModuleParser.FLOATING_POINT_LITERAL, 0); }
		public ITerminalNode CHAR() { return GetToken(ModuleParser.CHAR, 0); }
		public ITerminalNode STRING() { return GetToken(ModuleParser.STRING, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(ModuleParser.HEX_LITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (HEX_LITERAL - 91)) | (1L << (DECIMAL_LITERAL - 91)) | (1L << (OCTAL_LITERAL - 91)) | (1L << (FLOATING_POINT_LITERAL - 91)) | (1L << (CHAR - 91)) | (1L << (STRING - 91)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_decl_specifiersContext : ParserRuleContext {
		public Function_decl_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_decl_specifiers; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_decl_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_decl_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_decl_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_decl_specifiersContext function_decl_specifiers() {
		Function_decl_specifiersContext _localctx = new Function_decl_specifiersContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_function_decl_specifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = _input.La(1);
			if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (13 - 13)) | (1L << (14 - 13)) | (1L << (38 - 13)) | (1L << (39 - 13)) | (1L << (VIRTUAL - 13)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ptr_operatorContext : ParserRuleContext {
		public Ptr_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ptr_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterPtr_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitPtr_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtr_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ptr_operatorContext ptr_operator() {
		Ptr_operatorContext _localctx = new Ptr_operatorContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_ptr_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_la = _input.La(1);
			if ( !(_la==1 || _la==2) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_specifierContext : ParserRuleContext {
		public Access_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_access_specifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAccess_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAccess_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_specifierContext access_specifier() {
		Access_specifierContext _localctx = new Access_specifierContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_access_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 26) | (1L << 32) | (1L << 46))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operator);
		int _la;
		try {
			State = 422;
			switch (_input.La(1)) {
			case 18:
			case 42:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 377;
				_la = _input.La(1);
				if ( !(_la==18 || _la==42) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 380;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 378; Match(3);
					State = 379; Match(22);
					}
				}

				}
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382; Match(45);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 3);
				{
				State = 383; Match(28);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 384; Match(2);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 5);
				{
				State = 385; Match(53);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 6);
				{
				State = 386; Match(10);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 7);
				{
				State = 387; Match(43);
				}
				break;
			case 1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 388; Match(1);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 9);
				{
				State = 389; Match(19);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 10);
				{
				State = 390; Match(55);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 11);
				{
				State = 391; Match(20);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 12);
				{
				State = 392; Match(16);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 13);
				{
				State = 393; Match(4);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 14);
				{
				State = 394; Match(50);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 15);
				{
				State = 395; Match(36);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 16);
				{
				State = 396; Match(24);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 17);
				{
				State = 397; Match(11);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 18);
				{
				State = 398; Match(52);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 19);
				{
				State = 399; Match(51);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 20);
				{
				State = 400; Match(37);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 21);
				{
				State = 401; Match(31);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 22);
				{
				State = 402; Match(17);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 23);
				{
				State = 403; Match(41);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 24);
				{
				State = 404; Match(8);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 25);
				{
				State = 405; Match(34);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 26);
				{
				State = 406; Match(23);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 27);
				{
				State = 407; Match(54);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 28);
				{
				State = 408; Match(6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 29);
				{
				State = 409; Match(7);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 30);
				{
				State = 410; Match(56);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 31);
				{
				State = 411; Match(48);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 32);
				{
				State = 412; Match(49);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 33);
				{
				State = 413; Match(40);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 34);
				{
				State = 414; Match(5);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 35);
				{
				State = 415; Match(27);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 36);
				{
				State = 416; Match(25);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 37);
				{
				State = 417; Match(9);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 38);
				{
				State = 418; Match(30);
				State = 419; Match(12);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 39);
				{
				State = 420; Match(3);
				State = 421; Match(22);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignment_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 11) | (1L << 16) | (1L << 17) | (1L << 23) | (1L << 24) | (1L << 31) | (1L << 34) | (1L << 36) | (1L << 37) | (1L << 51) | (1L << 52))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_equality_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = _input.La(1);
			if ( !(_la==6 || _la==54) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_decl_startContext : ParserRuleContext {
		public ITerminalNode TEMPLATE() { return GetToken(ModuleParser.TEMPLATE, 0); }
		public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Template_decl_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_template_decl_start; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterTemplate_decl_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitTemplate_decl_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_decl_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_decl_startContext template_decl_start() {
		Template_decl_startContext _localctx = new Template_decl_startContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_template_decl_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(TEMPLATE);
			State = 429; Match(4);
			State = 430; template_param_list();
			State = 431; Match(50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_listContext : ParserRuleContext {
		public Template_param_listContext template_param_list(int i) {
			return GetRuleContext<Template_param_listContext>(i);
		}
		public IReadOnlyList<No_angle_brackets_or_bracketsContext> no_angle_brackets_or_brackets() {
			return GetRuleContexts<No_angle_brackets_or_bracketsContext>();
		}
		public No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets(int i) {
			return GetRuleContext<No_angle_brackets_or_bracketsContext>(i);
		}
		public IReadOnlyList<Template_param_listContext> template_param_list() {
			return GetRuleContexts<Template_param_listContext>();
		}
		public Template_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_template_param_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterTemplate_param_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitTemplate_param_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_listContext template_param_list() {
		Template_param_listContext _localctx = new Template_param_listContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_template_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 442;
				switch (_input.La(1)) {
				case 4:
					{
					{
					State = 433; Match(4);
					State = 434; template_param_list();
					State = 435; Match(50);
					}
					}
					break;
				case 30:
					{
					{
					State = 437; Match(30);
					State = 438; template_param_list();
					State = 439; Match(12);
					}
					}
					break;
				case 1:
				case 2:
				case 3:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 13:
				case 14:
				case 15:
				case 16:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27:
				case 28:
				case 29:
				case 31:
				case 32:
				case 33:
				case 34:
				case 35:
				case 36:
				case 37:
				case 38:
				case 39:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 49:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case IF:
				case ELSE:
				case FOR:
				case WHILE:
				case BREAK:
				case CASE:
				case CONTINUE:
				case SWITCH:
				case DO:
				case GOTO:
				case RETURN:
				case TYPEDEF:
				case VOID:
				case UNSIGNED:
				case SIGNED:
				case LONG:
				case CV_QUALIFIER:
				case VIRTUAL:
				case TRY:
				case CATCH:
				case THROW:
				case USING:
				case NAMESPACE:
				case AUTO:
				case REGISTER:
				case OPERATOR:
				case TEMPLATE:
				case CLASS_KEY:
				case ALPHA_NUMERIC:
				case OPENING_CURLY:
				case CLOSING_CURLY:
				case PRE_IF:
				case PRE_ELSE:
				case PRE_ENDIF:
				case HEX_LITERAL:
				case DECIMAL_LITERAL:
				case OCTAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHAR:
				case STRING:
				case COMMENT:
				case WHITESPACE:
				case CPPCOMMENT:
				case OTHER:
					{
					State = 441; no_angle_brackets_or_brackets();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 444;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_bracketsContext : ParserRuleContext {
		public No_bracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_brackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_brackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_bracketsContext no_brackets() {
		No_bracketsContext _localctx = new No_bracketsContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_no_brackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==12 || _la==30) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_brackets_curlies_or_squaresContext : ParserRuleContext {
		public No_brackets_curlies_or_squaresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets_curlies_or_squares; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_brackets_curlies_or_squares(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_brackets_curlies_or_squares(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets_curlies_or_squares(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_brackets_curlies_or_squaresContext no_brackets_curlies_or_squares() {
		No_brackets_curlies_or_squaresContext _localctx = new No_brackets_curlies_or_squaresContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_no_brackets_curlies_or_squares);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22) | (1L << 30))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_brackets_or_semicolonContext : ParserRuleContext {
		public No_brackets_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_brackets_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_brackets_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_brackets_or_semicolonContext no_brackets_or_semicolon() {
		No_brackets_or_semicolonContext _localctx = new No_brackets_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_no_brackets_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 12) | (1L << 30) | (1L << 47))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_angle_brackets_or_bracketsContext : ParserRuleContext {
		public No_angle_brackets_or_bracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_angle_brackets_or_brackets; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_angle_brackets_or_brackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_angle_brackets_or_brackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_angle_brackets_or_brackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets() {
		No_angle_brackets_or_bracketsContext _localctx = new No_angle_brackets_or_bracketsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_no_angle_brackets_or_brackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 12) | (1L << 30) | (1L << 50))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_curliesContext : ParserRuleContext {
		public No_curliesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_curlies; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_curlies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_curlies(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_curlies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_curliesContext no_curlies() {
		No_curliesContext _localctx = new No_curliesContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_no_curlies);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_squaresContext : ParserRuleContext {
		public No_squaresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_squares; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_squares(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_squares(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_squares(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_squaresContext no_squares() {
		No_squaresContext _localctx = new No_squaresContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_no_squares);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==3 || _la==22) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_squares_or_semicolonContext : ParserRuleContext {
		public No_squares_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_squares_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_squares_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_squares_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_squares_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_squares_or_semicolonContext no_squares_or_semicolon() {
		No_squares_or_semicolonContext _localctx = new No_squares_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_no_squares_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 22) | (1L << 47))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_comma_or_semicolonContext : ParserRuleContext {
		public No_comma_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_comma_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNo_comma_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNo_comma_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_comma_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_comma_or_semicolonContext no_comma_or_semicolon() {
		No_comma_or_semicolonContext _localctx = new No_comma_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_no_comma_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==27 || _la==47) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_waterContext : ParserRuleContext {
		public Assign_waterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_water; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssign_water(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssign_water(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_water(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_waterContext assign_water() {
		Assign_waterContext _localctx = new Assign_waterContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_assign_water);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22) | (1L << 27) | (1L << 30) | (1L << 47))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_water_l2Context : ParserRuleContext {
		public Assign_water_l2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_water_l2; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssign_water_l2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssign_water_l2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_water_l2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_water_l2Context assign_water_l2() {
		Assign_water_l2Context _localctx = new Assign_water_l2Context(_ctx, State);
		EnterRule(_localctx, 96, RULE_assign_water_l2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22) | (1L << 30))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaterContext : ParserRuleContext {
		public WaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_water; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterWater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitWater(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWater(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaterContext water() {
		WaterContext _localctx = new WaterContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_water);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public Function_param_listContext function_param_list() {
			return GetRuleContext<Function_param_listContext>(0);
		}
		public Ctor_listContext ctor_list() {
			return GetRuleContext<Ctor_listContext>(0);
		}
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Template_decl_startContext template_decl_start() {
			return GetRuleContext<Template_decl_startContext>(0);
		}
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_def; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = _input.La(1);
			if (_la==TEMPLATE) {
				{
				State = 468; template_decl_start();
				}
			}

			State = 472;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 471; return_type();
				}
				break;
			}
			State = 474; function_name();
			State = 475; function_param_list();
			State = 477;
			_la = _input.La(1);
			if (_la==29) {
				{
				State = 476; ctor_list();
				}
			}

			State = 479; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Function_decl_specifiersContext function_decl_specifiers(int i) {
			return GetRuleContext<Function_decl_specifiersContext>(i);
		}
		public IReadOnlyList<Function_decl_specifiersContext> function_decl_specifiers() {
			return GetRuleContexts<Function_decl_specifiersContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_return_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (13 - 13)) | (1L << (14 - 13)) | (1L << (38 - 13)) | (1L << (39 - 13)) | (1L << (VIRTUAL - 13)))) != 0)) {
				{
				{
				State = 481; function_decl_specifiers();
				}
				}
				State = 486;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 487; type_name();
			}
			State = 492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==2) {
				{
				{
				State = 489; ptr_operator();
				}
				}
				State = 494;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_param_listContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> CV_QUALIFIER() { return GetTokens(ModuleParser.CV_QUALIFIER); }
		public ITerminalNode CV_QUALIFIER(int i) {
			return GetToken(ModuleParser.CV_QUALIFIER, i);
		}
		public Exception_specificationContext exception_specification() {
			return GetRuleContext<Exception_specificationContext>(0);
		}
		public Parameter_decl_clauseContext parameter_decl_clause() {
			return GetRuleContext<Parameter_decl_clauseContext>(0);
		}
		public Function_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_param_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_param_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_param_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_param_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_param_listContext function_param_list() {
		Function_param_listContext _localctx = new Function_param_listContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_function_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(30);
			State = 497;
			_la = _input.La(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (VOID - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (LONG - 69)) | (1L << (CV_QUALIFIER - 69)) | (1L << (AUTO - 69)) | (1L << (REGISTER - 69)) | (1L << (CLASS_KEY - 69)) | (1L << (ALPHA_NUMERIC - 69)))) != 0)) {
				{
				State = 496; parameter_decl_clause();
				}
			}

			State = 499; Match(12);
			State = 503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CV_QUALIFIER) {
				{
				{
				State = 500; Match(CV_QUALIFIER);
				}
				}
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 507;
			_la = _input.La(1);
			if (_la==THROW) {
				{
				State = 506; exception_specification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_decl_clauseContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(ModuleParser.VOID, 0); }
		public IReadOnlyList<Parameter_declContext> parameter_decl() {
			return GetRuleContexts<Parameter_declContext>();
		}
		public Parameter_declContext parameter_decl(int i) {
			return GetRuleContext<Parameter_declContext>(i);
		}
		public Parameter_decl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter_decl_clause; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParameter_decl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParameter_decl_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_decl_clauseContext parameter_decl_clause() {
		Parameter_decl_clauseContext _localctx = new Parameter_decl_clauseContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_parameter_decl_clause);
		int _la;
		try {
			int _alt;
			State = 522;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 509; parameter_decl();
				State = 514;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 510; Match(27);
						State = 511; parameter_decl();
						}
						} 
					}
					State = 516;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				}
				}
				State = 519;
				_la = _input.La(1);
				if (_la==27) {
					{
					State = 517; Match(27);
					State = 518; Match(35);
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declContext : ParserRuleContext {
		public Parameter_idContext parameter_id() {
			return GetRuleContext<Parameter_idContext>(0);
		}
		public Param_decl_specifiersContext param_decl_specifiers() {
			return GetRuleContext<Param_decl_specifiersContext>(0);
		}
		public Parameter_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter_decl; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParameter_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParameter_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declContext parameter_decl() {
		Parameter_declContext _localctx = new Parameter_declContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_parameter_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; param_decl_specifiers();
			State = 525; parameter_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_idContext : ParserRuleContext {
		public PtrsContext ptrs() {
			return GetRuleContext<PtrsContext>(0);
		}
		public Parameter_idContext parameter_id() {
			return GetRuleContext<Parameter_idContext>(0);
		}
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_suffixContext type_suffix() {
			return GetRuleContext<Type_suffixContext>(0);
		}
		public Parameter_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter_id; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParameter_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParameter_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_idContext parameter_id() {
		Parameter_idContext _localctx = new Parameter_idContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_parameter_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = _input.La(1);
			if (_la==1 || _la==2) {
				{
				State = 527; ptrs();
				}
			}

			State = 535;
			switch (_input.La(1)) {
			case 30:
				{
				State = 530; Match(30);
				State = 531; parameter_id();
				State = 532; Match(12);
				}
				break;
			case 26:
			case 32:
			case 46:
			case ALPHA_NUMERIC:
				{
				State = 534; parameter_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 538;
			_la = _input.La(1);
			if (_la==3 || _la==30) {
				{
				State = 537; type_suffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		public ITerminalNode OPENING_CURLY() { return GetToken(ModuleParser.OPENING_CURLY, 0); }
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_compound_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_compound_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(OPENING_CURLY);
			 skipToEndOfObject(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctor_listContext : ParserRuleContext {
		public IReadOnlyList<Ctor_initializerContext> ctor_initializer() {
			return GetRuleContexts<Ctor_initializerContext>();
		}
		public Ctor_initializerContext ctor_initializer(int i) {
			return GetRuleContext<Ctor_initializerContext>(i);
		}
		public Ctor_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ctor_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCtor_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCtor_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtor_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ctor_listContext ctor_list() {
		Ctor_listContext _localctx = new Ctor_listContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_ctor_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; Match(29);
			State = 544; ctor_initializer();
			State = 549;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 545; Match(27);
				State = 546; ctor_initializer();
				}
				}
				State = 551;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctor_initializerContext : ParserRuleContext {
		public Initializer_idContext initializer_id() {
			return GetRuleContext<Initializer_idContext>(0);
		}
		public Ctor_exprContext ctor_expr() {
			return GetRuleContext<Ctor_exprContext>(0);
		}
		public Ctor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ctor_initializer; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCtor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCtor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ctor_initializerContext ctor_initializer() {
		Ctor_initializerContext _localctx = new Ctor_initializerContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_ctor_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; initializer_id();
			State = 553; ctor_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_idContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Initializer_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initializer_id; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInitializer_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInitializer_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_idContext initializer_id() {
		Initializer_idContext _localctx = new Initializer_idContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_initializer_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			_la = _input.La(1);
			if (_la==15) {
				{
				State = 555; Match(15);
				}
			}

			State = 558; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctor_exprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Ctor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ctor_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterCtor_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitCtor_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtor_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ctor_exprContext ctor_expr() {
		Ctor_exprContext _localctx = new Ctor_exprContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_ctor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(30);
			State = 562;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 40) | (1L << 45) | (1L << 46) | (1L << 55))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (ALPHA_NUMERIC - 85)) | (1L << (HEX_LITERAL - 85)) | (1L << (DECIMAL_LITERAL - 85)) | (1L << (OCTAL_LITERAL - 85)) | (1L << (FLOATING_POINT_LITERAL - 85)) | (1L << (CHAR - 85)) | (1L << (STRING - 85)))) != 0)) {
				{
				State = 561; expr();
				}
			}

			State = 564; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPERATOR() { return GetToken(ModuleParser.OPERATOR, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_function_name);
		try {
			State = 573;
			switch (_input.La(1)) {
			case 30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566; Match(30);
				State = 567; function_name();
				State = 568; Match(12);
				}
				break;
			case 26:
			case 32:
			case 46:
			case ALPHA_NUMERIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570; identifier();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 571; Match(OPERATOR);
				State = 572; @operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_specificationContext : ParserRuleContext {
		public Type_id_listContext type_id_list() {
			return GetRuleContext<Type_id_listContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(ModuleParser.THROW, 0); }
		public Exception_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_exception_specification; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterException_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitException_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_specificationContext exception_specification() {
		Exception_specificationContext _localctx = new Exception_specificationContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_exception_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(THROW);
			State = 576; Match(30);
			State = 577; type_id_list();
			State = 578; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_id_listContext : ParserRuleContext {
		public IReadOnlyList<Type_id_listContext> type_id_list() {
			return GetRuleContexts<Type_id_listContext>();
		}
		public No_bracketsContext no_brackets(int i) {
			return GetRuleContext<No_bracketsContext>(i);
		}
		public Type_id_listContext type_id_list(int i) {
			return GetRuleContext<Type_id_listContext>(i);
		}
		public IReadOnlyList<No_bracketsContext> no_brackets() {
			return GetRuleContexts<No_bracketsContext>();
		}
		public Type_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type_id_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterType_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitType_id_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_id_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_id_listContext type_id_list() {
		Type_id_listContext _localctx = new Type_id_listContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_type_id_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				{
				State = 580; no_brackets();
				}
				}
				State = 585;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 597;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==30) {
				{
				{
				State = 586; Match(30);
				State = 587; type_id_list();
				State = 588; Match(12);
				State = 592;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
					{
					{
					State = 589; no_brackets();
					}
					}
					State = 594;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				State = 599;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declaratorContext : ParserRuleContext {
		public Assign_expr_w_Context assign_expr_w_() {
			return GetRuleContext<Assign_expr_w_Context>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Init_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init_declarator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInit_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInit_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declaratorContext init_declarator() {
		Init_declaratorContext _localctx = new Init_declaratorContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_init_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; declarator();
			State = 608;
			switch (_input.La(1)) {
			case 30:
				{
				{
				State = 601; Match(30);
				State = 603;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 40) | (1L << 45) | (1L << 46) | (1L << 55))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (ALPHA_NUMERIC - 85)) | (1L << (HEX_LITERAL - 85)) | (1L << (DECIMAL_LITERAL - 85)) | (1L << (OCTAL_LITERAL - 85)) | (1L << (FLOATING_POINT_LITERAL - 85)) | (1L << (CHAR - 85)) | (1L << (STRING - 85)))) != 0)) {
					{
					State = 602; expr();
					}
				}

				State = 605; Match(12);
				}
				}
				break;
			case 16:
				{
				{
				State = 606; Match(16);
				State = 607; assign_expr_w_();
				}
				}
				break;
			case 27:
			case 47:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrsContext ptrs() {
			return GetRuleContext<PtrsContext>(0);
		}
		public Type_suffixContext type_suffix() {
			return GetRuleContext<Type_suffixContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_declarator; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			_la = _input.La(1);
			if (_la==1 || _la==2) {
				{
				State = 610; ptrs();
				}
			}

			State = 613; identifier();
			State = 615;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 614; type_suffix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_suffixContext : ParserRuleContext {
		public Param_type_listContext param_type_list() {
			return GetRuleContext<Param_type_listContext>(0);
		}
		public Constant_expr_w_Context constant_expr_w_() {
			return GetRuleContext<Constant_expr_w_Context>(0);
		}
		public Type_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type_suffix; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterType_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitType_suffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_suffixContext type_suffix() {
		Type_suffixContext _localctx = new Type_suffixContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_type_suffix);
		try {
			State = 622;
			switch (_input.La(1)) {
			case 3:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 617; Match(3);
				State = 618; constant_expr_w_();
				State = 619; Match(22);
				}
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621; param_type_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_expr_w_Context : ParserRuleContext {
		public IReadOnlyList<Assign_waterContext> assign_water() {
			return GetRuleContexts<Assign_waterContext>();
		}
		public IReadOnlyList<Assign_expr_w__l2Context> assign_expr_w__l2() {
			return GetRuleContexts<Assign_expr_w__l2Context>();
		}
		public Assign_waterContext assign_water(int i) {
			return GetRuleContext<Assign_waterContext>(i);
		}
		public Assign_expr_w__l2Context assign_expr_w__l2(int i) {
			return GetRuleContext<Assign_expr_w__l2Context>(i);
		}
		public Assign_expr_w_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_expr_w_; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssign_expr_w_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssign_expr_w_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr_w_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_expr_w_Context assign_expr_w_() {
		Assign_expr_w_Context _localctx = new Assign_expr_w_Context(_ctx, State);
		EnterRule(_localctx, 134, RULE_assign_expr_w_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				{
				State = 624; assign_water();
				}
				}
				State = 629;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3 || _la==30 || _la==OPENING_CURLY) {
				{
				{
				State = 642;
				switch (_input.La(1)) {
				case OPENING_CURLY:
					{
					State = 630; Match(OPENING_CURLY);
					State = 631; assign_expr_w__l2();
					State = 632; Match(CLOSING_CURLY);
					}
					break;
				case 30:
					{
					State = 634; Match(30);
					State = 635; assign_expr_w__l2();
					State = 636; Match(12);
					}
					break;
				case 3:
					{
					State = 638; Match(3);
					State = 639; assign_expr_w__l2();
					State = 640; Match(22);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 647;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
					{
					{
					State = 644; assign_water();
					}
					}
					State = 649;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				State = 654;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_expr_w__l2Context : ParserRuleContext {
		public IReadOnlyList<Assign_expr_w__l2Context> assign_expr_w__l2() {
			return GetRuleContexts<Assign_expr_w__l2Context>();
		}
		public Assign_water_l2Context assign_water_l2(int i) {
			return GetRuleContext<Assign_water_l2Context>(i);
		}
		public IReadOnlyList<Assign_water_l2Context> assign_water_l2() {
			return GetRuleContexts<Assign_water_l2Context>();
		}
		public Assign_expr_w__l2Context assign_expr_w__l2(int i) {
			return GetRuleContext<Assign_expr_w__l2Context>(i);
		}
		public Assign_expr_w__l2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_expr_w__l2; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterAssign_expr_w__l2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitAssign_expr_w__l2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr_w__l2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_expr_w__l2Context assign_expr_w__l2() {
		Assign_expr_w__l2Context _localctx = new Assign_expr_w__l2Context(_ctx, State);
		EnterRule(_localctx, 136, RULE_assign_expr_w__l2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				{
				State = 655; assign_water_l2();
				}
				}
				State = 660;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3 || _la==30 || _la==OPENING_CURLY) {
				{
				{
				State = 673;
				switch (_input.La(1)) {
				case OPENING_CURLY:
					{
					State = 661; Match(OPENING_CURLY);
					State = 662; assign_expr_w__l2();
					State = 663; Match(CLOSING_CURLY);
					}
					break;
				case 30:
					{
					State = 665; Match(30);
					State = 666; assign_expr_w__l2();
					State = 667; Match(12);
					}
					break;
				case 3:
					{
					State = 669; Match(3);
					State = 670; assign_expr_w__l2();
					State = 671; Match(22);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 678;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
					{
					{
					State = 675; assign_water_l2();
					}
					}
					State = 680;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				State = 685;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expr_w_Context : ParserRuleContext {
		public No_squaresContext no_squares(int i) {
			return GetRuleContext<No_squaresContext>(i);
		}
		public IReadOnlyList<No_squaresContext> no_squares() {
			return GetRuleContexts<No_squaresContext>();
		}
		public IReadOnlyList<Constant_expr_w_Context> constant_expr_w_() {
			return GetRuleContexts<Constant_expr_w_Context>();
		}
		public Constant_expr_w_Context constant_expr_w_(int i) {
			return GetRuleContext<Constant_expr_w_Context>(i);
		}
		public Constant_expr_w_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant_expr_w_; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterConstant_expr_w_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitConstant_expr_w_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expr_w_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expr_w_Context constant_expr_w_() {
		Constant_expr_w_Context _localctx = new Constant_expr_w_Context(_ctx, State);
		EnterRule(_localctx, 138, RULE_constant_expr_w_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 12) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				{
				State = 686; no_squares();
				}
				}
				State = 691;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 703;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 692; Match(3);
				State = 693; constant_expr_w_();
				State = 694; Match(22);
				State = 698;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 12) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << 56) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SWITCH - 64)) | (1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
					{
					{
					State = 695; no_squares();
					}
					}
					State = 700;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				State = 705;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_declContext : ParserRuleContext {
		public ITerminalNode TYPEDEF() { return GetToken(ModuleParser.TYPEDEF, 0); }
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Template_decl_startContext template_decl_start() {
			return GetRuleContext<Template_decl_startContext>(0);
		}
		public Simple_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_simple_decl; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterSimple_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitSimple_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_declContext simple_decl() {
		Simple_declContext _localctx = new Simple_declContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_simple_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 707;
			_la = _input.La(1);
			if (_la==TYPEDEF) {
				{
				State = 706; Match(TYPEDEF);
				}
			}

			State = 710;
			_la = _input.La(1);
			if (_la==TEMPLATE) {
				{
				State = 709; template_decl_start();
				}
			}

			}
			State = 712; var_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_var_decl; }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclByClassContext : Var_declContext {
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		public DeclByClassContext(Var_declContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterDeclByClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitDeclByClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclByClass(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclByTypeContext : Var_declContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public DeclByTypeContext(Var_declContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterDeclByType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitDeclByType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclByType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_var_decl);
		try {
			State = 721;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				_localctx = new DeclByClassContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 714; class_def();
				State = 716;
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 715; init_declarator_list();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new DeclByTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 718; type_name();
				State = 719; init_declarator_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declarator_listContext : ParserRuleContext {
		public Init_declaratorContext init_declarator(int i) {
			return GetRuleContext<Init_declaratorContext>(i);
		}
		public IReadOnlyList<Init_declaratorContext> init_declarator() {
			return GetRuleContexts<Init_declaratorContext>();
		}
		public Init_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init_declarator_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInit_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInit_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declarator_listContext init_declarator_list() {
		Init_declarator_listContext _localctx = new Init_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_init_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; init_declarator();
			State = 728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 724; Match(27);
				State = 725; init_declarator();
				}
				}
				State = 730;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 731; Match(47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Initializer_listContext initializer_list() {
			return GetRuleContext<Initializer_listContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initializer; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_initializer);
		try {
			State = 738;
			switch (_input.La(1)) {
			case 1:
			case 2:
			case 5:
			case 20:
			case 21:
			case 26:
			case 28:
			case 30:
			case 32:
			case 40:
			case 45:
			case 46:
			case 55:
			case ALPHA_NUMERIC:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733; assign_expr();
				}
				break;
			case OPENING_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734; Match(OPENING_CURLY);
				State = 735; initializer_list();
				State = 736; Match(CLOSING_CURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_listContext : ParserRuleContext {
		public IReadOnlyList<InitializerContext> initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		public Initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initializer_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterInitializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitInitializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_listContext initializer_list() {
		Initializer_listContext _localctx = new Initializer_listContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_initializer_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; initializer();
			State = 745;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 741; Match(27);
				State = 742; initializer();
				}
				}
				State = 747;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		public ITerminalNode CLASS_KEY() { return GetToken(ModuleParser.CLASS_KEY, 0); }
		public ITerminalNode OPENING_CURLY() { return GetToken(ModuleParser.OPENING_CURLY, 0); }
		public Base_classesContext base_classes() {
			return GetRuleContext<Base_classesContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_class_def; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; Match(CLASS_KEY);
			State = 750;
			_la = _input.La(1);
			if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (26 - 26)) | (1L << (32 - 26)) | (1L << (46 - 26)) | (1L << (ALPHA_NUMERIC - 26)))) != 0)) {
				{
				State = 749; class_name();
				}
			}

			State = 753;
			_la = _input.La(1);
			if (_la==29) {
				{
				State = 752; base_classes();
				}
			}

			State = 755; Match(OPENING_CURLY);
			skipToEndOfObject(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_class_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_classesContext : ParserRuleContext {
		public IReadOnlyList<Base_classContext> base_class() {
			return GetRuleContexts<Base_classContext>();
		}
		public Base_classContext base_class(int i) {
			return GetRuleContext<Base_classContext>(i);
		}
		public Base_classesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_classes; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterBase_classes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitBase_classes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_classes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_classesContext base_classes() {
		Base_classesContext _localctx = new Base_classesContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_base_classes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(29);
			State = 761; base_class();
			State = 766;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 762; Match(27);
				State = 763; base_class();
				}
				}
				State = 768;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_classContext : ParserRuleContext {
		public Access_specifierContext access_specifier() {
			return GetRuleContext<Access_specifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode VIRTUAL() { return GetToken(ModuleParser.VIRTUAL, 0); }
		public Base_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_class; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterBase_class(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitBase_class(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_class(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_classContext base_class() {
		Base_classContext _localctx = new Base_classContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_base_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			_la = _input.La(1);
			if (_la==VIRTUAL) {
				{
				State = 769; Match(VIRTUAL);
				}
			}

			State = 773;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 772; access_specifier();
				}
				break;
			}
			State = 775; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> CV_QUALIFIER() { return GetTokens(ModuleParser.CV_QUALIFIER); }
		public ITerminalNode CLASS_KEY() { return GetToken(ModuleParser.CLASS_KEY, 0); }
		public Template_param_listContext template_param_list(int i) {
			return GetRuleContext<Template_param_listContext>(i);
		}
		public ITerminalNode SIGNED() { return GetToken(ModuleParser.SIGNED, 0); }
		public ITerminalNode CV_QUALIFIER(int i) {
			return GetToken(ModuleParser.CV_QUALIFIER, i);
		}
		public Base_typeContext base_type(int i) {
			return GetRuleContext<Base_typeContext>(i);
		}
		public IReadOnlyList<Base_typeContext> base_type() {
			return GetRuleContexts<Base_typeContext>();
		}
		public ITerminalNode UNSIGNED() { return GetToken(ModuleParser.UNSIGNED, 0); }
		public IReadOnlyList<Template_param_listContext> template_param_list() {
			return GetRuleContexts<Template_param_listContext>();
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_type_name);
		int _la;
		try {
			State = 808;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 780;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CV_QUALIFIER) {
					{
					{
					State = 777; Match(CV_QUALIFIER);
					}
					}
					State = 782;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 784;
				_la = _input.La(1);
				if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (UNSIGNED - 70)) | (1L << (SIGNED - 70)) | (1L << (CLASS_KEY - 70)))) != 0)) {
					{
					State = 783;
					_la = _input.La(1);
					if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (UNSIGNED - 70)) | (1L << (SIGNED - 70)) | (1L << (CLASS_KEY - 70)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 786; base_type();
				State = 791;
				_la = _input.La(1);
				if (_la==4) {
					{
					State = 787; Match(4);
					State = 788; template_param_list();
					State = 789; Match(50);
					}
				}

				State = 803;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==15) {
					{
					{
					State = 793; Match(15);
					State = 794; base_type();
					State = 799;
					_la = _input.La(1);
					if (_la==4) {
						{
						State = 795; Match(4);
						State = 796; template_param_list();
						State = 797; Match(50);
						}
					}

					}
					}
					State = 805;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806; Match(UNSIGNED);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; Match(SIGNED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ALPHA_NUMERIC() { return GetTokens(ModuleParser.ALPHA_NUMERIC); }
		public IReadOnlyList<ITerminalNode> LONG() { return GetTokens(ModuleParser.LONG); }
		public ITerminalNode VOID(int i) {
			return GetToken(ModuleParser.VOID, i);
		}
		public IReadOnlyList<ITerminalNode> VOID() { return GetTokens(ModuleParser.VOID); }
		public ITerminalNode LONG(int i) {
			return GetToken(ModuleParser.LONG, i);
		}
		public ITerminalNode ALPHA_NUMERIC(int i) {
			return GetToken(ModuleParser.ALPHA_NUMERIC, i);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_base_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 810;
					_la = _input.La(1);
					if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (VOID - 69)) | (1L << (LONG - 69)) | (1L << (ALPHA_NUMERIC - 69)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 813;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			} while ( _alt!=2 && _alt!=ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_decl_specifiersContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(ModuleParser.AUTO, 0); }
		public ITerminalNode REGISTER() { return GetToken(ModuleParser.REGISTER, 0); }
		public Param_decl_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_decl_specifiers; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParam_decl_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParam_decl_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_decl_specifiersContext param_decl_specifiers() {
		Param_decl_specifiersContext _localctx = new Param_decl_specifiersContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_param_decl_specifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			_la = _input.La(1);
			if (_la==AUTO || _la==REGISTER) {
				{
				State = 815;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==REGISTER) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 818; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_type_listContext : ParserRuleContext {
		public IReadOnlyList<Param_typeContext> param_type() {
			return GetRuleContexts<Param_typeContext>();
		}
		public ITerminalNode VOID() { return GetToken(ModuleParser.VOID, 0); }
		public Param_typeContext param_type(int i) {
			return GetRuleContext<Param_typeContext>(i);
		}
		public Param_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParam_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParam_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_type_listContext param_type_list() {
		Param_type_listContext _localctx = new Param_type_listContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_param_type_list);
		int _la;
		try {
			State = 837;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822; Match(30);
				State = 823; Match(VOID);
				State = 824; Match(12);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 825; Match(30);
				State = 834;
				_la = _input.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (VOID - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (LONG - 69)) | (1L << (CV_QUALIFIER - 69)) | (1L << (AUTO - 69)) | (1L << (REGISTER - 69)) | (1L << (CLASS_KEY - 69)) | (1L << (ALPHA_NUMERIC - 69)))) != 0)) {
					{
					State = 826; param_type();
					State = 831;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==27) {
						{
						{
						State = 827; Match(27);
						State = 828; param_type();
						}
						}
						State = 833;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 836; Match(12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_typeContext : ParserRuleContext {
		public Param_type_idContext param_type_id() {
			return GetRuleContext<Param_type_idContext>(0);
		}
		public Param_decl_specifiersContext param_decl_specifiers() {
			return GetRuleContext<Param_decl_specifiersContext>(0);
		}
		public Param_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParam_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParam_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_typeContext param_type() {
		Param_typeContext _localctx = new Param_typeContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_param_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; param_decl_specifiers();
			State = 840; param_type_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_type_idContext : ParserRuleContext {
		public PtrsContext ptrs() {
			return GetRuleContext<PtrsContext>(0);
		}
		public Param_type_idContext param_type_id() {
			return GetRuleContext<Param_type_idContext>(0);
		}
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_suffixContext type_suffix() {
			return GetRuleContext<Type_suffixContext>(0);
		}
		public Param_type_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type_id; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterParam_type_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitParam_type_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_type_idContext param_type_id() {
		Param_type_idContext _localctx = new Param_type_idContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_param_type_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_la = _input.La(1);
			if (_la==1 || _la==2) {
				{
				State = 842; ptrs();
				}
			}

			State = 852;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 845; Match(30);
				State = 846; param_type_id();
				State = 847; Match(12);
				}
				break;

			case 2:
				{
				State = 850;
				_la = _input.La(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (26 - 26)) | (1L << (32 - 26)) | (1L << (46 - 26)) | (1L << (ALPHA_NUMERIC - 26)))) != 0)) {
					{
					State = 849; parameter_name();
					}
				}

				}
				break;
			}
			State = 855;
			_la = _input.La(1);
			if (_la==3 || _la==30) {
				{
				State = 854; type_suffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ALPHA_NUMERIC() { return GetTokens(ModuleParser.ALPHA_NUMERIC); }
		public Access_specifierContext access_specifier() {
			return GetRuleContext<Access_specifierContext>(0);
		}
		public ITerminalNode ALPHA_NUMERIC(int i) {
			return GetToken(ModuleParser.ALPHA_NUMERIC, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_identifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_identifier);
		try {
			int _alt;
			State = 866;
			switch (_input.La(1)) {
			case ALPHA_NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 857; Match(ALPHA_NUMERIC);
				State = 862;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
				while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 858; Match(15);
						State = 859; Match(ALPHA_NUMERIC);
						}
						} 
					}
					State = 864;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
				}
				}
				}
				break;
			case 26:
			case 32:
			case 46:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865; access_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(ModuleParser.OCTAL_LITERAL, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(ModuleParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(ModuleParser.HEX_LITERAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_number; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (HEX_LITERAL - 91)) | (1L << (DECIMAL_LITERAL - 91)) | (1L << (OCTAL_LITERAL - 91)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrsContext : ParserRuleContext {
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public PtrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ptrs; }
		public override void EnterRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.EnterPtrs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IModuleListener typedListener = listener as IModuleListener;
			if (typedListener != null) typedListener.ExitPtrs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModuleVisitor<TResult> typedVisitor = visitor as IModuleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrsContext ptrs() {
		PtrsContext _localctx = new PtrsContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_ptrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 870; ptr_operator();
				}
				}
				State = 873;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==1 || _la==2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return postfix_expression_sempred((Postfix_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfix_expression_sempred(Postfix_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x66\x36E\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\xB9\n\x2\f\x2\xE\x2\xBC\v"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x5\x4\xC6\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\xCC\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\xD5\n\x6\x3\a\x3\a\x3\a\x5\a\xDA\n\a\x3\b\x3\b\x3\b\x5"+
		"\b\xDF\n\b\x3\t\x3\t\x3\t\x5\t\xE4\n\t\x3\n\x3\n\x3\n\x5\n\xE9\n\n\x3"+
		"\v\x3\v\x3\v\x5\v\xEE\n\v\x3\f\x3\f\x3\f\x3\f\x5\f\xF4\n\f\x3\r\x3\r\x3"+
		"\r\x3\r\x5\r\xFA\n\r\x3\xE\x3\xE\x3\xE\x5\xE\xFF\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x104\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\x109\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x111\n\x11\x3\x12\x3\x12\a\x12\x115"+
		"\n\x12\f\x12\xE\x12\x118\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x120\n\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x12D\n\x15\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\a\x17\x133\n\x17\f\x17\xE\x17\x136\v\x17\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x14C\n\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x152\n\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x157\n"+
		"\x1A\f\x1A\xE\x1A\x15A\v\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\x15F\n\x1B\f\x1B"+
		"\xE\x1B\x162\v\x1B\x5\x1B\x164\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x16E\n\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		" \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x5$\x17F\n$\x3$\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3"+
		"$\x3$\x5$\x1A9\n$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x6(\x1BD\n(\r(\xE(\x1BE\x3)\x3)\x3*\x3*\x3+"+
		"\x3+\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x34\x5\x34\x1D8\n\x34\x3\x34\x5\x34\x1DB\n\x34"+
		"\x3\x34\x3\x34\x3\x34\x5\x34\x1E0\n\x34\x3\x34\x3\x34\x3\x35\a\x35\x1E5"+
		"\n\x35\f\x35\xE\x35\x1E8\v\x35\x3\x35\x3\x35\x3\x35\a\x35\x1ED\n\x35\f"+
		"\x35\xE\x35\x1F0\v\x35\x3\x36\x3\x36\x5\x36\x1F4\n\x36\x3\x36\x3\x36\a"+
		"\x36\x1F8\n\x36\f\x36\xE\x36\x1FB\v\x36\x3\x36\x5\x36\x1FE\n\x36\x3\x37"+
		"\x3\x37\x3\x37\a\x37\x203\n\x37\f\x37\xE\x37\x206\v\x37\x3\x37\x3\x37"+
		"\x5\x37\x20A\n\x37\x3\x37\x5\x37\x20D\n\x37\x3\x38\x3\x38\x3\x38\x3\x39"+
		"\x5\x39\x213\n\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x21A\n\x39"+
		"\x3\x39\x5\x39\x21D\n\x39\x3:\x3:\x3:\x3;\x3;\x3;\x3;\a;\x226\n;\f;\xE"+
		";\x229\v;\x3<\x3<\x3<\x3=\x5=\x22F\n=\x3=\x3=\x3>\x3>\x5>\x235\n>\x3>"+
		"\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x240\n?\x3@\x3@\x3@\x3@\x3@\x3\x41"+
		"\a\x41\x248\n\x41\f\x41\xE\x41\x24B\v\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\a\x41\x251\n\x41\f\x41\xE\x41\x254\v\x41\a\x41\x256\n\x41\f\x41\xE\x41"+
		"\x259\v\x41\x3\x42\x3\x42\x3\x42\x5\x42\x25E\n\x42\x3\x42\x3\x42\x3\x42"+
		"\x5\x42\x263\n\x42\x3\x43\x5\x43\x266\n\x43\x3\x43\x3\x43\x5\x43\x26A"+
		"\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x271\n\x44\x3\x45\a\x45"+
		"\x274\n\x45\f\x45\xE\x45\x277\v\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x285\n\x45\x3"+
		"\x45\a\x45\x288\n\x45\f\x45\xE\x45\x28B\v\x45\a\x45\x28D\n\x45\f\x45\xE"+
		"\x45\x290\v\x45\x3\x46\a\x46\x293\n\x46\f\x46\xE\x46\x296\v\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x5\x46\x2A4\n\x46\x3\x46\a\x46\x2A7\n\x46\f\x46\xE\x46\x2AA\v"+
		"\x46\a\x46\x2AC\n\x46\f\x46\xE\x46\x2AF\v\x46\x3G\aG\x2B2\nG\fG\xEG\x2B5"+
		"\vG\x3G\x3G\x3G\x3G\aG\x2BB\nG\fG\xEG\x2BE\vG\aG\x2C0\nG\fG\xEG\x2C3\v"+
		"G\x3H\x5H\x2C6\nH\x3H\x5H\x2C9\nH\x3H\x3H\x3I\x3I\x5I\x2CF\nI\x3I\x3I"+
		"\x3I\x5I\x2D4\nI\x3J\x3J\x3J\aJ\x2D9\nJ\fJ\xEJ\x2DC\vJ\x3J\x3J\x3K\x3"+
		"K\x3K\x3K\x3K\x5K\x2E5\nK\x3L\x3L\x3L\aL\x2EA\nL\fL\xEL\x2ED\vL\x3M\x3"+
		"M\x5M\x2F1\nM\x3M\x5M\x2F4\nM\x3M\x3M\x3M\x3N\x3N\x3O\x3O\x3O\x3O\aO\x2FF"+
		"\nO\fO\xEO\x302\vO\x3P\x5P\x305\nP\x3P\x5P\x308\nP\x3P\x3P\x3Q\aQ\x30D"+
		"\nQ\fQ\xEQ\x310\vQ\x3Q\x5Q\x313\nQ\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x31A\nQ\x3"+
		"Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x322\nQ\aQ\x324\nQ\fQ\xEQ\x327\vQ\x3Q\x3Q\x5"+
		"Q\x32B\nQ\x3R\x6R\x32E\nR\rR\xER\x32F\x3S\x5S\x333\nS\x3S\x3S\x3T\x3T"+
		"\x3U\x3U\x3U\x3U\x3U\x3U\x3U\aU\x340\nU\fU\xEU\x343\vU\x5U\x345\nU\x3"+
		"U\x5U\x348\nU\x3V\x3V\x3V\x3W\x5W\x34E\nW\x3W\x3W\x3W\x3W\x3W\x5W\x355"+
		"\nW\x5W\x357\nW\x3W\x5W\x35A\nW\x3X\x3X\x3X\aX\x35F\nX\fX\xEX\x362\vX"+
		"\x3X\x5X\x365\nX\x3Y\x3Y\x3Z\x6Z\x36A\nZ\rZ\xEZ\x36B\x3Z\x2\x2\x3\x32"+
		"[\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\x2\x1C\x4\x2\n\n++\x4\x2\x1E\x1E//\x5\x2\x4\x4\f\f\x37\x37"+
		"\x4\x2\a\a**\a\x2\x3\x4\x16\x16\x1E\x1E//\x39\x39\x6\x2\x6\x6\t\t\x34"+
		"\x34::\x3\x2]\x62\x5\x2\xF\x10()LL\x3\x2\x3\x4\x5\x2\x1C\x1C\"\"\x30\x30"+
		"\x4\x2\x14\x14,,\t\x2\r\r\x12\x13\x19\x1A!!$$&\'\x35\x36\x4\x2\b\b\x38"+
		"\x38\x4\x2\xE\xE  \a\x2\x5\x5\xE\xE\x18\x18  XY\x5\x2\xE\xE  \x31\x31"+
		"\x6\x2\x6\x6\xE\xE  \x34\x34\x3\x2XY\x4\x2\x5\x5\x18\x18\x5\x2\x5\x5\x18"+
		"\x18\x31\x31\x4\x2\x1D\x1D\x31\x31\t\x2\x5\x5\xE\xE\x18\x18\x1D\x1D  "+
		"\x31\x31XY\x4\x2HIVV\x5\x2GGJJWW\x3\x2RS\x3\x2]_\x3A9\x2\xBA\x3\x2\x2"+
		"\x2\x4\xBD\x3\x2\x2\x2\x6\xC2\x3\x2\x2\x2\b\xC7\x3\x2\x2\x2\n\xD4\x3\x2"+
		"\x2\x2\f\xD6\x3\x2\x2\x2\xE\xDB\x3\x2\x2\x2\x10\xE0\x3\x2\x2\x2\x12\xE5"+
		"\x3\x2\x2\x2\x14\xEA\x3\x2\x2\x2\x16\xEF\x3\x2\x2\x2\x18\xF5\x3\x2\x2"+
		"\x2\x1A\xFB\x3\x2\x2\x2\x1C\x100\x3\x2\x2\x2\x1E\x105\x3\x2\x2\x2 \x110"+
		"\x3\x2\x2\x2\"\x112\x3\x2\x2\x2$\x11F\x3\x2\x2\x2&\x121\x3\x2\x2\x2(\x12C"+
		"\x3\x2\x2\x2*\x12E\x3\x2\x2\x2,\x130\x3\x2\x2\x2.\x137\x3\x2\x2\x2\x30"+
		"\x139\x3\x2\x2\x2\x32\x13B\x3\x2\x2\x2\x34\x163\x3\x2\x2\x2\x36\x165\x3"+
		"\x2\x2\x2\x38\x16D\x3\x2\x2\x2:\x16F\x3\x2\x2\x2<\x171\x3\x2\x2\x2>\x173"+
		"\x3\x2\x2\x2@\x175\x3\x2\x2\x2\x42\x177\x3\x2\x2\x2\x44\x179\x3\x2\x2"+
		"\x2\x46\x1A8\x3\x2\x2\x2H\x1AA\x3\x2\x2\x2J\x1AC\x3\x2\x2\x2L\x1AE\x3"+
		"\x2\x2\x2N\x1BC\x3\x2\x2\x2P\x1C0\x3\x2\x2\x2R\x1C2\x3\x2\x2\x2T\x1C4"+
		"\x3\x2\x2\x2V\x1C6\x3\x2\x2\x2X\x1C8\x3\x2\x2\x2Z\x1CA\x3\x2\x2\x2\\\x1CC"+
		"\x3\x2\x2\x2^\x1CE\x3\x2\x2\x2`\x1D0\x3\x2\x2\x2\x62\x1D2\x3\x2\x2\x2"+
		"\x64\x1D4\x3\x2\x2\x2\x66\x1D7\x3\x2\x2\x2h\x1E6\x3\x2\x2\x2j\x1F1\x3"+
		"\x2\x2\x2l\x20C\x3\x2\x2\x2n\x20E\x3\x2\x2\x2p\x212\x3\x2\x2\x2r\x21E"+
		"\x3\x2\x2\x2t\x221\x3\x2\x2\x2v\x22A\x3\x2\x2\x2x\x22E\x3\x2\x2\x2z\x232"+
		"\x3\x2\x2\x2|\x23F\x3\x2\x2\x2~\x241\x3\x2\x2\x2\x80\x249\x3\x2\x2\x2"+
		"\x82\x25A\x3\x2\x2\x2\x84\x265\x3\x2\x2\x2\x86\x270\x3\x2\x2\x2\x88\x275"+
		"\x3\x2\x2\x2\x8A\x294\x3\x2\x2\x2\x8C\x2B3\x3\x2\x2\x2\x8E\x2C5\x3\x2"+
		"\x2\x2\x90\x2D3\x3\x2\x2\x2\x92\x2D5\x3\x2\x2\x2\x94\x2E4\x3\x2\x2\x2"+
		"\x96\x2E6\x3\x2\x2\x2\x98\x2EE\x3\x2\x2\x2\x9A\x2F8\x3\x2\x2\x2\x9C\x2FA"+
		"\x3\x2\x2\x2\x9E\x304\x3\x2\x2\x2\xA0\x32A\x3\x2\x2\x2\xA2\x32D\x3\x2"+
		"\x2\x2\xA4\x332\x3\x2\x2\x2\xA6\x336\x3\x2\x2\x2\xA8\x347\x3\x2\x2\x2"+
		"\xAA\x349\x3\x2\x2\x2\xAC\x34D\x3\x2\x2\x2\xAE\x364\x3\x2\x2\x2\xB0\x366"+
		"\x3\x2\x2\x2\xB2\x369\x3\x2\x2\x2\xB4\xB9\x5\x66\x34\x2\xB5\xB9\x5\x8E"+
		"H\x2\xB6\xB9\x5\x4\x3\x2\xB7\xB9\x5\x64\x33\x2\xB8\xB4\x3\x2\x2\x2\xB8"+
		"\xB5\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\xBC\x3\x2"+
		"\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\x3\x3\x2\x2\x2\xBC"+
		"\xBA\x3\x2\x2\x2\xBD\xBE\aP\x2\x2\xBE\xBF\aQ\x2\x2\xBF\xC0\x5\xAEX\x2"+
		"\xC0\xC1\a\x31\x2\x2\xC1\x5\x3\x2\x2\x2\xC2\xC5\x5\b\x5\x2\xC3\xC4\a\x1D"+
		"\x2\x2\xC4\xC6\x5\x6\x4\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\a\x3\x2\x2\x2\xC7\xCB\x5\n\x6\x2\xC8\xC9\x5H%\x2\xC9\xCA\x5\b\x5\x2\xCA"+
		"\xCC\x3\x2\x2\x2\xCB\xC8\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\t\x3\x2\x2"+
		"\x2\xCD\xD5\x5\f\a\x2\xCE\xCF\x5\f\a\x2\xCF\xD0\a#\x2\x2\xD0\xD1\x5\x6"+
		"\x4\x2\xD1\xD2\a\x1F\x2\x2\xD2\xD3\x5\n\x6\x2\xD3\xD5\x3\x2\x2\x2\xD4"+
		"\xCD\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2\xD5\v\x3\x2\x2\x2\xD6\xD9\x5\xE\b"+
		"\x2\xD7\xD8\a\x33\x2\x2\xD8\xDA\x5\f\a\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA"+
		"\x3\x2\x2\x2\xDA\r\x3\x2\x2\x2\xDB\xDE\x5\x10\t\x2\xDC\xDD\a\x32\x2\x2"+
		"\xDD\xDF\x5\xE\b\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xF\x3"+
		"\x2\x2\x2\xE0\xE3\x5\x12\n\x2\xE1\xE2\a\x15\x2\x2\xE2\xE4\x5\x10\t\x2"+
		"\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\x11\x3\x2\x2\x2\xE5\xE8\x5"+
		"\x14\v\x2\xE6\xE7\a-\x2\x2\xE7\xE9\x5\x12\n\x2\xE8\xE6\x3\x2\x2\x2\xE8"+
		"\xE9\x3\x2\x2\x2\xE9\x13\x3\x2\x2\x2\xEA\xED\x5\x16\f\x2\xEB\xEC\a\x3"+
		"\x2\x2\xEC\xEE\x5\x14\v\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE"+
		"\x15\x3\x2\x2\x2\xEF\xF3\x5\x18\r\x2\xF0\xF1\x5J&\x2\xF1\xF2\x5\x16\f"+
		"\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF0\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\x17"+
		"\x3\x2\x2\x2\xF5\xF9\x5\x1A\xE\x2\xF6\xF7\x5<\x1F\x2\xF7\xF8\x5\x18\r"+
		"\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF6\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\x19"+
		"\x3\x2\x2\x2\xFB\xFE\x5\x1C\xF\x2\xFC\xFD\t\x2\x2\x2\xFD\xFF\x5\x1A\xE"+
		"\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x1B\x3\x2\x2\x2\x100\x103"+
		"\x5\x1E\x10\x2\x101\x102\t\x3\x2\x2\x102\x104\x5\x1C\xF\x2\x103\x101\x3"+
		"\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x1D\x3\x2\x2\x2\x105\x108\x5 \x11"+
		"\x2\x106\x107\t\x4\x2\x2\x107\x109\x5\x1E\x10\x2\x108\x106\x3\x2\x2\x2"+
		"\x108\x109\x3\x2\x2\x2\x109\x1F\x3\x2\x2\x2\x10A\x10B\a \x2\x2\x10B\x10C"+
		"\x5\"\x12\x2\x10C\x10D\a\xE\x2\x2\x10D\x10E\x5 \x11\x2\x10E\x111\x3\x2"+
		"\x2\x2\x10F\x111\x5$\x13\x2\x110\x10A\x3\x2\x2\x2\x110\x10F\x3\x2\x2\x2"+
		"\x111!\x3\x2\x2\x2\x112\x116\x5\xA0Q\x2\x113\x115\x5\x42\"\x2\x114\x113"+
		"\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116\x117\x3"+
		"\x2\x2\x2\x117#\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119\x11A\x5\x30\x19"+
		"\x2\x11A\x11B\x5 \x11\x2\x11B\x120\x3\x2\x2\x2\x11C\x120\x5&\x14\x2\x11D"+
		"\x120\x5(\x15\x2\x11E\x120\x5\x32\x1A\x2\x11F\x119\x3\x2\x2\x2\x11F\x11C"+
		"\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x11E\x3\x2\x2\x2\x120%\x3\x2\x2"+
		"\x2\x121\x122\x5:\x1E\x2\x122\x123\x5 \x11\x2\x123\'\x3\x2\x2\x2\x124"+
		"\x125\x5*\x16\x2\x125\x126\a \x2\x2\x126\x127\x5,\x17\x2\x127\x128\a\xE"+
		"\x2\x2\x128\x12D\x3\x2\x2\x2\x129\x12A\x5*\x16\x2\x12A\x12B\x5.\x18\x2"+
		"\x12B\x12D\x3\x2\x2\x2\x12C\x124\x3\x2\x2\x2\x12C\x129\x3\x2\x2\x2\x12D"+
		")\x3\x2\x2\x2\x12E\x12F\a\x17\x2\x2\x12F+\x3\x2\x2\x2\x130\x134\x5\xA0"+
		"Q\x2\x131\x133\x5\x42\"\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2"+
		"\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135-\x3\x2\x2\x2\x136\x134"+
		"\x3\x2\x2\x2\x137\x138\x5$\x13\x2\x138/\x3\x2\x2\x2\x139\x13A\t\x5\x2"+
		"\x2\x13A\x31\x3\x2\x2\x2\x13B\x13C\b\x1A\x1\x2\x13C\x13D\x5\x38\x1D\x2"+
		"\x13D\x158\x3\x2\x2\x2\x13E\x13F\f\b\x2\x2\x13F\x140\a\x5\x2\x2\x140\x141"+
		"\x5\x6\x4\x2\x141\x142\a\x18\x2\x2\x142\x157\x3\x2\x2\x2\x143\x144\f\a"+
		"\x2\x2\x144\x145\a \x2\x2\x145\x146\x5\x34\x1B\x2\x146\x147\a\xE\x2\x2"+
		"\x147\x157\x3\x2\x2\x2\x148\x149\f\x6\x2\x2\x149\x14B\a.\x2\x2\x14A\x14C"+
		"\aU\x2\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2"+
		"\x2\x2\x14D\x157\x5\xAEX\x2\x14E\x14F\f\x5\x2\x2\x14F\x151\a\v\x2\x2\x150"+
		"\x152\aU\x2\x2\x151\x150\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\x3"+
		"\x2\x2\x2\x153\x157\x5\xAEX\x2\x154\x155\f\x4\x2\x2\x155\x157\x5\x30\x19"+
		"\x2\x156\x13E\x3\x2\x2\x2\x156\x143\x3\x2\x2\x2\x156\x148\x3\x2\x2\x2"+
		"\x156\x14E\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158"+
		"\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x33\x3\x2\x2\x2\x15A\x158"+
		"\x3\x2\x2\x2\x15B\x160\x5\x36\x1C\x2\x15C\x15D\a\x1D\x2\x2\x15D\x15F\x5"+
		"\x36\x1C\x2\x15E\x15C\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2"+
		"\x2\x2\x160\x161\x3\x2\x2\x2\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2"+
		"\x2\x163\x15B\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x35\x3\x2\x2\x2\x165"+
		"\x166\x5\b\x5\x2\x166\x37\x3\x2\x2\x2\x167\x16E\x5\xAEX\x2\x168\x16E\x5"+
		"> \x2\x169\x16A\a \x2\x2\x16A\x16B\x5\x6\x4\x2\x16B\x16C\a\xE\x2\x2\x16C"+
		"\x16E\x3\x2\x2\x2\x16D\x167\x3\x2\x2\x2\x16D\x168\x3\x2\x2\x2\x16D\x169"+
		"\x3\x2\x2\x2\x16E\x39\x3\x2\x2\x2\x16F\x170\t\x6\x2\x2\x170;\x3\x2\x2"+
		"\x2\x171\x172\t\a\x2\x2\x172=\x3\x2\x2\x2\x173\x174\t\b\x2\x2\x174?\x3"+
		"\x2\x2\x2\x175\x176\t\t\x2\x2\x176\x41\x3\x2\x2\x2\x177\x178\t\n\x2\x2"+
		"\x178\x43\x3\x2\x2\x2\x179\x17A\t\v\x2\x2\x17A\x45\x3\x2\x2\x2\x17B\x17E"+
		"\t\f\x2\x2\x17C\x17D\a\x5\x2\x2\x17D\x17F\a\x18\x2\x2\x17E\x17C\x3\x2"+
		"\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x1A9\x3\x2\x2\x2\x180\x1A9\a/\x2\x2"+
		"\x181\x1A9\a\x1E\x2\x2\x182\x1A9\a\x4\x2\x2\x183\x1A9\a\x37\x2\x2\x184"+
		"\x1A9\a\f\x2\x2\x185\x1A9\a-\x2\x2\x186\x1A9\a\x3\x2\x2\x187\x1A9\a\x15"+
		"\x2\x2\x188\x1A9\a\x39\x2\x2\x189\x1A9\a\x16\x2\x2\x18A\x1A9\a\x12\x2"+
		"\x2\x18B\x1A9\a\x6\x2\x2\x18C\x1A9\a\x34\x2\x2\x18D\x1A9\a&\x2\x2\x18E"+
		"\x1A9\a\x1A\x2\x2\x18F\x1A9\a\r\x2\x2\x190\x1A9\a\x36\x2\x2\x191\x1A9"+
		"\a\x35\x2\x2\x192\x1A9\a\'\x2\x2\x193\x1A9\a!\x2\x2\x194\x1A9\a\x13\x2"+
		"\x2\x195\x1A9\a+\x2\x2\x196\x1A9\a\n\x2\x2\x197\x1A9\a$\x2\x2\x198\x1A9"+
		"\a\x19\x2\x2\x199\x1A9\a\x38\x2\x2\x19A\x1A9\a\b\x2\x2\x19B\x1A9\a\t\x2"+
		"\x2\x19C\x1A9\a:\x2\x2\x19D\x1A9\a\x32\x2\x2\x19E\x1A9\a\x33\x2\x2\x19F"+
		"\x1A9\a*\x2\x2\x1A0\x1A9\a\a\x2\x2\x1A1\x1A9\a\x1D\x2\x2\x1A2\x1A9\a\x1B"+
		"\x2\x2\x1A3\x1A9\a\v\x2\x2\x1A4\x1A5\a \x2\x2\x1A5\x1A9\a\xE\x2\x2\x1A6"+
		"\x1A7\a\x5\x2\x2\x1A7\x1A9\a\x18\x2\x2\x1A8\x17B\x3\x2\x2\x2\x1A8\x180"+
		"\x3\x2\x2\x2\x1A8\x181\x3\x2\x2\x2\x1A8\x182\x3\x2\x2\x2\x1A8\x183\x3"+
		"\x2\x2\x2\x1A8\x184\x3\x2\x2\x2\x1A8\x185\x3\x2\x2\x2\x1A8\x186\x3\x2"+
		"\x2\x2\x1A8\x187\x3\x2\x2\x2\x1A8\x188\x3\x2\x2\x2\x1A8\x189\x3\x2\x2"+
		"\x2\x1A8\x18A\x3\x2\x2\x2\x1A8\x18B\x3\x2\x2\x2\x1A8\x18C\x3\x2\x2\x2"+
		"\x1A8\x18D\x3\x2\x2\x2\x1A8\x18E\x3\x2\x2\x2\x1A8\x18F\x3\x2\x2\x2\x1A8"+
		"\x190\x3\x2\x2\x2\x1A8\x191\x3\x2\x2\x2\x1A8\x192\x3\x2\x2\x2\x1A8\x193"+
		"\x3\x2\x2\x2\x1A8\x194\x3\x2\x2\x2\x1A8\x195\x3\x2\x2\x2\x1A8\x196\x3"+
		"\x2\x2\x2\x1A8\x197\x3\x2\x2\x2\x1A8\x198\x3\x2\x2\x2\x1A8\x199\x3\x2"+
		"\x2\x2\x1A8\x19A\x3\x2\x2\x2\x1A8\x19B\x3\x2\x2\x2\x1A8\x19C\x3\x2\x2"+
		"\x2\x1A8\x19D\x3\x2\x2\x2\x1A8\x19E\x3\x2\x2\x2\x1A8\x19F\x3\x2\x2\x2"+
		"\x1A8\x1A0\x3\x2\x2\x2\x1A8\x1A1\x3\x2\x2\x2\x1A8\x1A2\x3\x2\x2\x2\x1A8"+
		"\x1A3\x3\x2\x2\x2\x1A8\x1A4\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A9G\x3"+
		"\x2\x2\x2\x1AA\x1AB\t\r\x2\x2\x1ABI\x3\x2\x2\x2\x1AC\x1AD\t\xE\x2\x2\x1AD"+
		"K\x3\x2\x2\x2\x1AE\x1AF\aU\x2\x2\x1AF\x1B0\a\x6\x2\x2\x1B0\x1B1\x5N(\x2"+
		"\x1B1\x1B2\a\x34\x2\x2\x1B2M\x3\x2\x2\x2\x1B3\x1B4\a\x6\x2\x2\x1B4\x1B5"+
		"\x5N(\x2\x1B5\x1B6\a\x34\x2\x2\x1B6\x1BD\x3\x2\x2\x2\x1B7\x1B8\a \x2\x2"+
		"\x1B8\x1B9\x5N(\x2\x1B9\x1BA\a\xE\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1BD"+
		"\x5V,\x2\x1BC\x1B3\x3\x2\x2\x2\x1BC\x1B7\x3\x2\x2\x2\x1BC\x1BB\x3\x2\x2"+
		"\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2"+
		"\x1BFO\x3\x2\x2\x2\x1C0\x1C1\n\xF\x2\x2\x1C1Q\x3\x2\x2\x2\x1C2\x1C3\n"+
		"\x10\x2\x2\x1C3S\x3\x2\x2\x2\x1C4\x1C5\n\x11\x2\x2\x1C5U\x3\x2\x2\x2\x1C6"+
		"\x1C7\n\x12\x2\x2\x1C7W\x3\x2\x2\x2\x1C8\x1C9\n\x13\x2\x2\x1C9Y\x3\x2"+
		"\x2\x2\x1CA\x1CB\n\x14\x2\x2\x1CB[\x3\x2\x2\x2\x1CC\x1CD\n\x15\x2\x2\x1CD"+
		"]\x3\x2\x2\x2\x1CE\x1CF\n\x16\x2\x2\x1CF_\x3\x2\x2\x2\x1D0\x1D1\n\x17"+
		"\x2\x2\x1D1\x61\x3\x2\x2\x2\x1D2\x1D3\n\x10\x2\x2\x1D3\x63\x3\x2\x2\x2"+
		"\x1D4\x1D5\v\x2\x2\x2\x1D5\x65\x3\x2\x2\x2\x1D6\x1D8\x5L\'\x2\x1D7\x1D6"+
		"\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1DA\x3\x2\x2\x2\x1D9\x1DB\x5"+
		"h\x35\x2\x1DA\x1D9\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2"+
		"\x2\x1DC\x1DD\x5|?\x2\x1DD\x1DF\x5j\x36\x2\x1DE\x1E0\x5t;\x2\x1DF\x1DE"+
		"\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E2\x5"+
		"r:\x2\x1E2g\x3\x2\x2\x2\x1E3\x1E5\x5@!\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5\x1E8"+
		"\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E9\x3"+
		"\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E9\x1EA\x5\xA0Q\x2\x1EA\x1EE\x3\x2\x2"+
		"\x2\x1EB\x1ED\x5\x42\"\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2\x2"+
		"\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EFi\x3\x2\x2\x2\x1F0\x1EE"+
		"\x3\x2\x2\x2\x1F1\x1F3\a \x2\x2\x1F2\x1F4\x5l\x37\x2\x1F3\x1F2\x3\x2\x2"+
		"\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1F9\a\xE\x2\x2\x1F6"+
		"\x1F8\aK\x2\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8\x1FB\x3\x2\x2\x2\x1F9\x1F7\x3"+
		"\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FD\x3\x2\x2\x2\x1FB\x1F9\x3\x2"+
		"\x2\x2\x1FC\x1FE\x5~@\x2\x1FD\x1FC\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE"+
		"k\x3\x2\x2\x2\x1FF\x204\x5n\x38\x2\x200\x201\a\x1D\x2\x2\x201\x203\x5"+
		"n\x38\x2\x202\x200\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2"+
		"\x2\x204\x205\x3\x2\x2\x2\x205\x209\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2"+
		"\x207\x208\a\x1D\x2\x2\x208\x20A\a%\x2\x2\x209\x207\x3\x2\x2\x2\x209\x20A"+
		"\x3\x2\x2\x2\x20A\x20D\x3\x2\x2\x2\x20B\x20D\aG\x2\x2\x20C\x1FF\x3\x2"+
		"\x2\x2\x20C\x20B\x3\x2\x2\x2\x20Dm\x3\x2\x2\x2\x20E\x20F\x5\xA4S\x2\x20F"+
		"\x210\x5p\x39\x2\x210o\x3\x2\x2\x2\x211\x213\x5\xB2Z\x2\x212\x211\x3\x2"+
		"\x2\x2\x212\x213\x3\x2\x2\x2\x213\x219\x3\x2\x2\x2\x214\x215\a \x2\x2"+
		"\x215\x216\x5p\x39\x2\x216\x217\a\xE\x2\x2\x217\x21A\x3\x2\x2\x2\x218"+
		"\x21A\x5\xA6T\x2\x219\x214\x3\x2\x2\x2\x219\x218\x3\x2\x2\x2\x21A\x21C"+
		"\x3\x2\x2\x2\x21B\x21D\x5\x86\x44\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3"+
		"\x2\x2\x2\x21Dq\x3\x2\x2\x2\x21E\x21F\aX\x2\x2\x21F\x220\b:\x1\x2\x220"+
		"s\x3\x2\x2\x2\x221\x222\a\x1F\x2\x2\x222\x227\x5v<\x2\x223\x224\a\x1D"+
		"\x2\x2\x224\x226\x5v<\x2\x225\x223\x3\x2\x2\x2\x226\x229\x3\x2\x2\x2\x227"+
		"\x225\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228u\x3\x2\x2\x2\x229\x227\x3"+
		"\x2\x2\x2\x22A\x22B\x5x=\x2\x22B\x22C\x5z>\x2\x22Cw\x3\x2\x2\x2\x22D\x22F"+
		"\a\x11\x2\x2\x22E\x22D\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x230\x3"+
		"\x2\x2\x2\x230\x231\x5\xAEX\x2\x231y\x3\x2\x2\x2\x232\x234\a \x2\x2\x233"+
		"\x235\x5\x6\x4\x2\x234\x233\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x236"+
		"\x3\x2\x2\x2\x236\x237\a\xE\x2\x2\x237{\x3\x2\x2\x2\x238\x239\a \x2\x2"+
		"\x239\x23A\x5|?\x2\x23A\x23B\a\xE\x2\x2\x23B\x240\x3\x2\x2\x2\x23C\x240"+
		"\x5\xAEX\x2\x23D\x23E\aT\x2\x2\x23E\x240\x5\x46$\x2\x23F\x238\x3\x2\x2"+
		"\x2\x23F\x23C\x3\x2\x2\x2\x23F\x23D\x3\x2\x2\x2\x240}\x3\x2\x2\x2\x241"+
		"\x242\aO\x2\x2\x242\x243\a \x2\x2\x243\x244\x5\x80\x41\x2\x244\x245\a"+
		"\xE\x2\x2\x245\x7F\x3\x2\x2\x2\x246\x248\x5P)\x2\x247\x246\x3\x2\x2\x2"+
		"\x248\x24B\x3\x2\x2\x2\x249\x247\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A"+
		"\x257\x3\x2\x2\x2\x24B\x249\x3\x2\x2\x2\x24C\x24D\a \x2\x2\x24D\x24E\x5"+
		"\x80\x41\x2\x24E\x252\a\xE\x2\x2\x24F\x251\x5P)\x2\x250\x24F\x3\x2\x2"+
		"\x2\x251\x254\x3\x2\x2\x2\x252\x250\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2"+
		"\x253\x256\x3\x2\x2\x2\x254\x252\x3\x2\x2\x2\x255\x24C\x3\x2\x2\x2\x256"+
		"\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x81"+
		"\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x262\x5\x84\x43\x2\x25B\x25D\a"+
		" \x2\x2\x25C\x25E\x5\x6\x4\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2\x2"+
		"\x2\x25E\x25F\x3\x2\x2\x2\x25F\x263\a\xE\x2\x2\x260\x261\a\x12\x2\x2\x261"+
		"\x263\x5\x88\x45\x2\x262\x25B\x3\x2\x2\x2\x262\x260\x3\x2\x2\x2\x262\x263"+
		"\x3\x2\x2\x2\x263\x83\x3\x2\x2\x2\x264\x266\x5\xB2Z\x2\x265\x264\x3\x2"+
		"\x2\x2\x265\x266\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x269\x5\xAEX\x2"+
		"\x268\x26A\x5\x86\x44\x2\x269\x268\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A"+
		"\x85\x3\x2\x2\x2\x26B\x26C\a\x5\x2\x2\x26C\x26D\x5\x8CG\x2\x26D\x26E\a"+
		"\x18\x2\x2\x26E\x271\x3\x2\x2\x2\x26F\x271\x5\xA8U\x2\x270\x26B\x3\x2"+
		"\x2\x2\x270\x26F\x3\x2\x2\x2\x271\x87\x3\x2\x2\x2\x272\x274\x5`\x31\x2"+
		"\x273\x272\x3\x2\x2\x2\x274\x277\x3\x2\x2\x2\x275\x273\x3\x2\x2\x2\x275"+
		"\x276\x3\x2\x2\x2\x276\x28E\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x278\x279"+
		"\aX\x2\x2\x279\x27A\x5\x8A\x46\x2\x27A\x27B\aY\x2\x2\x27B\x285\x3\x2\x2"+
		"\x2\x27C\x27D\a \x2\x2\x27D\x27E\x5\x8A\x46\x2\x27E\x27F\a\xE\x2\x2\x27F"+
		"\x285\x3\x2\x2\x2\x280\x281\a\x5\x2\x2\x281\x282\x5\x8A\x46\x2\x282\x283"+
		"\a\x18\x2\x2\x283\x285\x3\x2\x2\x2\x284\x278\x3\x2\x2\x2\x284\x27C\x3"+
		"\x2\x2\x2\x284\x280\x3\x2\x2\x2\x285\x289\x3\x2\x2\x2\x286\x288\x5`\x31"+
		"\x2\x287\x286\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2"+
		"\x289\x28A\x3\x2\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28C"+
		"\x284\x3\x2\x2\x2\x28D\x290\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2\x28E\x28F"+
		"\x3\x2\x2\x2\x28F\x89\x3\x2\x2\x2\x290\x28E\x3\x2\x2\x2\x291\x293\x5\x62"+
		"\x32\x2\x292\x291\x3\x2\x2\x2\x293\x296\x3\x2\x2\x2\x294\x292\x3\x2\x2"+
		"\x2\x294\x295\x3\x2\x2\x2\x295\x2AD\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2"+
		"\x297\x298\aX\x2\x2\x298\x299\x5\x8A\x46\x2\x299\x29A\aY\x2\x2\x29A\x2A4"+
		"\x3\x2\x2\x2\x29B\x29C\a \x2\x2\x29C\x29D\x5\x8A\x46\x2\x29D\x29E\a\xE"+
		"\x2\x2\x29E\x2A4\x3\x2\x2\x2\x29F\x2A0\a\x5\x2\x2\x2A0\x2A1\x5\x8A\x46"+
		"\x2\x2A1\x2A2\a\x18\x2\x2\x2A2\x2A4\x3\x2\x2\x2\x2A3\x297\x3\x2\x2\x2"+
		"\x2A3\x29B\x3\x2\x2\x2\x2A3\x29F\x3\x2\x2\x2\x2A4\x2A8\x3\x2\x2\x2\x2A5"+
		"\x2A7\x5\x62\x32\x2\x2A6\x2A5\x3\x2\x2\x2\x2A7\x2AA\x3\x2\x2\x2\x2A8\x2A6"+
		"\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AC\x3\x2\x2\x2\x2AA\x2A8\x3"+
		"\x2\x2\x2\x2AB\x2A3\x3\x2\x2\x2\x2AC\x2AF\x3\x2\x2\x2\x2AD\x2AB\x3\x2"+
		"\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x8B\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2"+
		"\x2B0\x2B2\x5Z.\x2\x2B1\x2B0\x3\x2\x2\x2\x2B2\x2B5\x3\x2\x2\x2\x2B3\x2B1"+
		"\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2C1\x3\x2\x2\x2\x2B5\x2B3\x3"+
		"\x2\x2\x2\x2B6\x2B7\a\x5\x2\x2\x2B7\x2B8\x5\x8CG\x2\x2B8\x2BC\a\x18\x2"+
		"\x2\x2B9\x2BB\x5Z.\x2\x2BA\x2B9\x3\x2\x2\x2\x2BB\x2BE\x3\x2\x2\x2\x2BC"+
		"\x2BA\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2C0\x3\x2\x2\x2\x2BE\x2BC"+
		"\x3\x2\x2\x2\x2BF\x2B6\x3\x2\x2\x2\x2C0\x2C3\x3\x2\x2\x2\x2C1\x2BF\x3"+
		"\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x8D\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2"+
		"\x2\x2C4\x2C6\a\x46\x2\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2"+
		"\x2C6\x2C8\x3\x2\x2\x2\x2C7\x2C9\x5L\'\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8\x2C9"+
		"\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x5\x90I\x2\x2CB\x8F\x3\x2"+
		"\x2\x2\x2CC\x2CE\x5\x98M\x2\x2CD\x2CF\x5\x92J\x2\x2CE\x2CD\x3\x2\x2\x2"+
		"\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D4\x3\x2\x2\x2\x2D0\x2D1\x5\xA0Q\x2\x2D1"+
		"\x2D2\x5\x92J\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3\x2CC\x3\x2\x2\x2\x2D3\x2D0"+
		"\x3\x2\x2\x2\x2D4\x91\x3\x2\x2\x2\x2D5\x2DA\x5\x82\x42\x2\x2D6\x2D7\a"+
		"\x1D\x2\x2\x2D7\x2D9\x5\x82\x42\x2\x2D8\x2D6\x3\x2\x2\x2\x2D9\x2DC\x3"+
		"\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DD\x3\x2"+
		"\x2\x2\x2DC\x2DA\x3\x2\x2\x2\x2DD\x2DE\a\x31\x2\x2\x2DE\x93\x3\x2\x2\x2"+
		"\x2DF\x2E5\x5\b\x5\x2\x2E0\x2E1\aX\x2\x2\x2E1\x2E2\x5\x96L\x2\x2E2\x2E3"+
		"\aY\x2\x2\x2E3\x2E5\x3\x2\x2\x2\x2E4\x2DF\x3\x2\x2\x2\x2E4\x2E0\x3\x2"+
		"\x2\x2\x2E5\x95\x3\x2\x2\x2\x2E6\x2EB\x5\x94K\x2\x2E7\x2E8\a\x1D\x2\x2"+
		"\x2E8\x2EA\x5\x94K\x2\x2E9\x2E7\x3\x2\x2\x2\x2EA\x2ED\x3\x2\x2\x2\x2EB"+
		"\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x97\x3\x2\x2\x2\x2ED\x2EB"+
		"\x3\x2\x2\x2\x2EE\x2F0\aV\x2\x2\x2EF\x2F1\x5\x9AN\x2\x2F0\x2EF\x3\x2\x2"+
		"\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F3\x3\x2\x2\x2\x2F2\x2F4\x5\x9CO\x2\x2F3"+
		"\x2F2\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F6"+
		"\aX\x2\x2\x2F6\x2F7\bM\x1\x2\x2F7\x99\x3\x2\x2\x2\x2F8\x2F9\x5\xAEX\x2"+
		"\x2F9\x9B\x3\x2\x2\x2\x2FA\x2FB\a\x1F\x2\x2\x2FB\x300\x5\x9EP\x2\x2FC"+
		"\x2FD\a\x1D\x2\x2\x2FD\x2FF\x5\x9EP\x2\x2FE\x2FC\x3\x2\x2\x2\x2FF\x302"+
		"\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x9D\x3\x2"+
		"\x2\x2\x302\x300\x3\x2\x2\x2\x303\x305\aL\x2\x2\x304\x303\x3\x2\x2\x2"+
		"\x304\x305\x3\x2\x2\x2\x305\x307\x3\x2\x2\x2\x306\x308\x5\x44#\x2\x307"+
		"\x306\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A"+
		"\x5\xAEX\x2\x30A\x9F\x3\x2\x2\x2\x30B\x30D\aK\x2\x2\x30C\x30B\x3\x2\x2"+
		"\x2\x30D\x310\x3\x2\x2\x2\x30E\x30C\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2"+
		"\x30F\x312\x3\x2\x2\x2\x310\x30E\x3\x2\x2\x2\x311\x313\t\x18\x2\x2\x312"+
		"\x311\x3\x2\x2\x2\x312\x313\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x319"+
		"\x5\xA2R\x2\x315\x316\a\x6\x2\x2\x316\x317\x5N(\x2\x317\x318\a\x34\x2"+
		"\x2\x318\x31A\x3\x2\x2\x2\x319\x315\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2"+
		"\x31A\x325\x3\x2\x2\x2\x31B\x31C\a\x11\x2\x2\x31C\x321\x5\xA2R\x2\x31D"+
		"\x31E\a\x6\x2\x2\x31E\x31F\x5N(\x2\x31F\x320\a\x34\x2\x2\x320\x322\x3"+
		"\x2\x2\x2\x321\x31D\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x324\x3\x2"+
		"\x2\x2\x323\x31B\x3\x2\x2\x2\x324\x327\x3\x2\x2\x2\x325\x323\x3\x2\x2"+
		"\x2\x325\x326\x3\x2\x2\x2\x326\x32B\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2"+
		"\x328\x32B\aH\x2\x2\x329\x32B\aI\x2\x2\x32A\x30E\x3\x2\x2\x2\x32A\x328"+
		"\x3\x2\x2\x2\x32A\x329\x3\x2\x2\x2\x32B\xA1\x3\x2\x2\x2\x32C\x32E\t\x19"+
		"\x2\x2\x32D\x32C\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x32D\x3\x2\x2"+
		"\x2\x32F\x330\x3\x2\x2\x2\x330\xA3\x3\x2\x2\x2\x331\x333\t\x1A\x2\x2\x332"+
		"\x331\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x335"+
		"\x5\xA0Q\x2\x335\xA5\x3\x2\x2\x2\x336\x337\x5\xAEX\x2\x337\xA7\x3\x2\x2"+
		"\x2\x338\x339\a \x2\x2\x339\x33A\aG\x2\x2\x33A\x348\a\xE\x2\x2\x33B\x344"+
		"\a \x2\x2\x33C\x341\x5\xAAV\x2\x33D\x33E\a\x1D\x2\x2\x33E\x340\x5\xAA"+
		"V\x2\x33F\x33D\x3\x2\x2\x2\x340\x343\x3\x2\x2\x2\x341\x33F\x3\x2\x2\x2"+
		"\x341\x342\x3\x2\x2\x2\x342\x345\x3\x2\x2\x2\x343\x341\x3\x2\x2\x2\x344"+
		"\x33C\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x348"+
		"\a\xE\x2\x2\x347\x338\x3\x2\x2\x2\x347\x33B\x3\x2\x2\x2\x348\xA9\x3\x2"+
		"\x2\x2\x349\x34A\x5\xA4S\x2\x34A\x34B\x5\xACW\x2\x34B\xAB\x3\x2\x2\x2"+
		"\x34C\x34E\x5\xB2Z\x2\x34D\x34C\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E"+
		"\x356\x3\x2\x2\x2\x34F\x350\a \x2\x2\x350\x351\x5\xACW\x2\x351\x352\a"+
		"\xE\x2\x2\x352\x357\x3\x2\x2\x2\x353\x355\x5\xA6T\x2\x354\x353\x3\x2\x2"+
		"\x2\x354\x355\x3\x2\x2\x2\x355\x357\x3\x2\x2\x2\x356\x34F\x3\x2\x2\x2"+
		"\x356\x354\x3\x2\x2\x2\x357\x359\x3\x2\x2\x2\x358\x35A\x5\x86\x44\x2\x359"+
		"\x358\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\xAD\x3\x2\x2\x2\x35B\x360"+
		"\aW\x2\x2\x35C\x35D\a\x11\x2\x2\x35D\x35F\aW\x2\x2\x35E\x35C\x3\x2\x2"+
		"\x2\x35F\x362\x3\x2\x2\x2\x360\x35E\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2"+
		"\x361\x365\x3\x2\x2\x2\x362\x360\x3\x2\x2\x2\x363\x365\x5\x44#\x2\x364"+
		"\x35B\x3\x2\x2\x2\x364\x363\x3\x2\x2\x2\x365\xAF\x3\x2\x2\x2\x366\x367"+
		"\t\x1B\x2\x2\x367\xB1\x3\x2\x2\x2\x368\x36A\x5\x42\"\x2\x369\x368\x3\x2"+
		"\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36B\x36C\x3\x2\x2"+
		"\x2\x36C\xB3\x3\x2\x2\x2\x64\xB8\xBA\xC5\xCB\xD4\xD9\xDE\xE3\xE8\xED\xF3"+
		"\xF9\xFE\x103\x108\x110\x116\x11F\x12C\x134\x14B\x151\x156\x158\x160\x163"+
		"\x16D\x17E\x1A8\x1BC\x1BE\x1D7\x1DA\x1DF\x1E6\x1EE\x1F3\x1F9\x1FD\x204"+
		"\x209\x20C\x212\x219\x21C\x227\x22E\x234\x23F\x249\x252\x257\x25D\x262"+
		"\x265\x269\x270\x275\x284\x289\x28E\x294\x2A3\x2A8\x2AD\x2B3\x2BC\x2C1"+
		"\x2C5\x2C8\x2CE\x2D3\x2DA\x2E4\x2EB\x2F0\x2F3\x300\x304\x307\x30E\x312"+
		"\x319\x321\x325\x32A\x32F\x332\x341\x344\x347\x34D\x354\x356\x359\x360"+
		"\x364\x36B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace myAntlr
