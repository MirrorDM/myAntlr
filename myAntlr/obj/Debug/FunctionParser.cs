//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-dazou\documents\visual studio 2012\Projects\MyAntlr\myAntlr\Function.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace myAntlr {



using System;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class FunctionParser : Parser {
	public const int
		T__54=1, T__53=2, T__52=3, T__51=4, T__50=5, T__49=6, T__48=7, T__47=8, 
		T__46=9, T__45=10, T__44=11, T__43=12, T__42=13, T__41=14, T__40=15, T__39=16, 
		T__38=17, T__37=18, T__36=19, T__35=20, T__34=21, T__33=22, T__32=23, 
		T__31=24, T__30=25, T__29=26, T__28=27, T__27=28, T__26=29, T__25=30, 
		T__24=31, T__23=32, T__22=33, T__21=34, T__20=35, T__19=36, T__18=37, 
		T__17=38, T__16=39, T__15=40, T__14=41, T__13=42, T__12=43, T__11=44, 
		T__10=45, T__9=46, T__8=47, T__7=48, T__6=49, T__5=50, T__4=51, T__3=52, 
		T__2=53, T__1=54, T__0=55, IF=56, ELSE=57, FOR=58, WHILE=59, BREAK=60, 
		CASE=61, CONTINUE=62, SWITCH=63, DO=64, GOTO=65, RETURN=66, TYPEDEF=67, 
		VOID=68, UNSIGNED=69, SIGNED=70, LONG=71, CV_QUALIFIER=72, VIRTUAL=73, 
		TRY=74, CATCH=75, THROW=76, USING=77, NAMESPACE=78, AUTO=79, REGISTER=80, 
		OPERATOR=81, TEMPLATE=82, CLASS_KEY=83, ALPHA_NUMERIC=84, OPENING_CURLY=85, 
		CLOSING_CURLY=86, PRE_IF=87, PRE_ELSE=88, PRE_ENDIF=89, HEX_LITERAL=90, 
		DECIMAL_LITERAL=91, OCTAL_LITERAL=92, FLOATING_POINT_LITERAL=93, CHAR=94, 
		STRING=95, COMMENT=96, WHITESPACE=97, CPPCOMMENT=98, OTHER=99;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'&'", "'['", "'*'", "'<'", "'--'", "'!='", "'<='", "'<<'", 
		"'%'", "'->'", "'*='", "')'", "'inline'", "'explicit'", "'::'", "'='", 
		"'|='", "'new'", "'|'", "'!'", "'sizeof'", "'<<='", "']'", "'-='", "'->*'", 
		"'public'", "','", "'-'", "':'", "'('", "'&='", "'private'", "'?'", "'>>='", 
		"'+='", "'^='", "'friend'", "'static'", "'++'", "'>>'", "'^'", "'delete'", 
		"'.'", "'+'", "'protected'", "';'", "'&&'", "'||'", "'>'", "'%='", "'/='", 
		"'=='", "'/'", "'~'", "'>='", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'case'", "'continue'", "'switch'", "'do'", "'goto'", "'return'", "'typedef'", 
		"'void'", "'unsigned'", "'signed'", "'long'", "CV_QUALIFIER", "'virtual'", 
		"'try'", "'catch'", "'throw'", "'using'", "'namespace'", "'auto'", "'register'", 
		"'operator'", "'template'", "CLASS_KEY", "ALPHA_NUMERIC", "'{'", "'}'", 
		"PRE_IF", "PRE_ELSE", "PRE_ENDIF", "HEX_LITERAL", "DECIMAL_LITERAL", "OCTAL_LITERAL", 
		"FLOATING_POINT_LITERAL", "CHAR", "STRING", "COMMENT", "WHITESPACE", "CPPCOMMENT", 
		"OTHER"
	};
	public const int
		RULE_statements = 0, RULE_statement = 1, RULE_pre_opener = 2, RULE_pre_else = 3, 
		RULE_pre_closer = 4, RULE_opening_curly = 5, RULE_closing_curly = 6, RULE_block_starter = 7, 
		RULE_selection_or_iteration = 8, RULE_do_statement1 = 9, RULE_for_init_statement = 10, 
		RULE_jump_statement = 11, RULE_label = 12, RULE_expr_statement = 13, RULE_condition = 14, 
		RULE_unary_operator = 15, RULE_relational_operator = 16, RULE_constant = 17, 
		RULE_function_decl_specifiers = 18, RULE_ptr_operator = 19, RULE_access_specifier = 20, 
		RULE_operator = 21, RULE_assignment_operator = 22, RULE_equality_operator = 23, 
		RULE_template_decl_start = 24, RULE_template_param_list = 25, RULE_no_brackets = 26, 
		RULE_no_brackets_curlies_or_squares = 27, RULE_no_brackets_or_semicolon = 28, 
		RULE_no_angle_brackets_or_brackets = 29, RULE_no_curlies = 30, RULE_no_squares = 31, 
		RULE_no_squares_or_semicolon = 32, RULE_no_comma_or_semicolon = 33, RULE_assign_water = 34, 
		RULE_assign_water_l2 = 35, RULE_water = 36, RULE_expr = 37, RULE_assign_expr = 38, 
		RULE_conditional_expression = 39, RULE_or_expression = 40, RULE_and_expression = 41, 
		RULE_inclusive_or_expression = 42, RULE_exclusive_or_expression = 43, 
		RULE_bit_and_expression = 44, RULE_equality_expression = 45, RULE_relational_expression = 46, 
		RULE_shift_expression = 47, RULE_additive_expression = 48, RULE_multiplicative_expression = 49, 
		RULE_cast_expression = 50, RULE_cast_target = 51, RULE_unary_expression = 52, 
		RULE_unary_op_and_cast_expr = 53, RULE_sizeof_expression = 54, RULE_sizeof = 55, 
		RULE_sizeof_operand = 56, RULE_sizeof_operand2 = 57, RULE_inc_dec = 58, 
		RULE_postfix_expression = 59, RULE_function_argument_list = 60, RULE_function_argument = 61, 
		RULE_primary_expression = 62, RULE_init_declarator = 63, RULE_declarator = 64, 
		RULE_type_suffix = 65, RULE_simple_decl = 66, RULE_var_decl = 67, RULE_init_declarator_list = 68, 
		RULE_initializer = 69, RULE_initializer_list = 70, RULE_class_def = 71, 
		RULE_class_name = 72, RULE_base_classes = 73, RULE_base_class = 74, RULE_type_name = 75, 
		RULE_base_type = 76, RULE_param_decl_specifiers = 77, RULE_parameter_name = 78, 
		RULE_param_type_list = 79, RULE_param_type = 80, RULE_param_type_id = 81, 
		RULE_identifier = 82, RULE_number = 83, RULE_ptrs = 84;
	public static readonly string[] ruleNames = {
		"statements", "statement", "pre_opener", "pre_else", "pre_closer", "opening_curly", 
		"closing_curly", "block_starter", "selection_or_iteration", "do_statement1", 
		"for_init_statement", "jump_statement", "label", "expr_statement", "condition", 
		"unary_operator", "relational_operator", "constant", "function_decl_specifiers", 
		"ptr_operator", "access_specifier", "operator", "assignment_operator", 
		"equality_operator", "template_decl_start", "template_param_list", "no_brackets", 
		"no_brackets_curlies_or_squares", "no_brackets_or_semicolon", "no_angle_brackets_or_brackets", 
		"no_curlies", "no_squares", "no_squares_or_semicolon", "no_comma_or_semicolon", 
		"assign_water", "assign_water_l2", "water", "expr", "assign_expr", "conditional_expression", 
		"or_expression", "and_expression", "inclusive_or_expression", "exclusive_or_expression", 
		"bit_and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"cast_expression", "cast_target", "unary_expression", "unary_op_and_cast_expr", 
		"sizeof_expression", "sizeof", "sizeof_operand", "sizeof_operand2", "inc_dec", 
		"postfix_expression", "function_argument_list", "function_argument", "primary_expression", 
		"init_declarator", "declarator", "type_suffix", "simple_decl", "var_decl", 
		"init_declarator_list", "initializer", "initializer_list", "class_def", 
		"class_name", "base_classes", "base_class", "type_name", "base_type", 
		"param_decl_specifiers", "parameter_name", "param_type_list", "param_type", 
		"param_type_id", "identifier", "number", "ptrs"
	};

	public override string GrammarFileName { get { return "Function.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	public bool skipToEndOfObject()
	{
	    Stack<Object> CurlyStack = new Stack<Object>();
	    Object o = new Object();
	    int t = _input.La(1);

	    while (t != -1 && !(CurlyStack.Count == 0 && t == CLOSING_CURLY))
	    {
	        if (t == PRE_ELSE)
	        {
	            Stack<Object> ifdefStack = new Stack<Object>();
	            Consume();
	            t = _input.La(1);

	            while (t != -1 && !(ifdefStack.Count == 0 && (t == PRE_ENDIF)))
	            {
	                if (t == PRE_IF)
	                {
	                    ifdefStack.Push(o);
	                }
	                else if (t == PRE_ENDIF)
	                {
	                    ifdefStack.Pop();
	                }
	                Consume();
	                t = _input.La(1);
	            }
	        }

	        if (t == OPENING_CURLY)
	        {
	            CurlyStack.Push(o);
	        }
	        else if (t == CLOSING_CURLY)
	        {
	            CurlyStack.Pop();
	        }
	        Consume();
	        t = _input.La(1);
	    }
	    if (t != -1)
	    {
	        Consume();
	    }
	    return true;
	}

	// this should go into FunctionGrammar but ANTLR fails
	// to join the parser::members-section on inclusion

	public bool preProcSkipToEnd()
	{
	    Stack<Object> CurlyStack = new Stack<Object>();
	    Object o = new Object();
	    int t = _input.La(1);

	    while (t != -1 && !(CurlyStack.Count == 0 && t == PRE_ENDIF))
	    {
	        if (t == PRE_IF)
	        {
	            CurlyStack.Push(o);
	        }
	        else if (t == PRE_ENDIF)
	        {
	            CurlyStack.Pop();
	        }
	        Consume();
	        t = _input.La(1);
	    }
	    if (t != -1)
	    {
	        Consume();
	    }

	    return true;
	}

	public FunctionParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public IReadOnlyList<Pre_closerContext> pre_closer() {
			return GetRuleContexts<Pre_closerContext>();
		}
		public IReadOnlyList<Pre_openerContext> pre_opener() {
			return GetRuleContexts<Pre_openerContext>();
		}
		public IReadOnlyList<Pre_elseContext> pre_else() {
			return GetRuleContexts<Pre_elseContext>();
		}
		public Pre_closerContext pre_closer(int i) {
			return GetRuleContext<Pre_closerContext>(i);
		}
		public Pre_openerContext pre_opener(int i) {
			return GetRuleContext<Pre_openerContext>(i);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Pre_elseContext pre_else(int i) {
			return GetRuleContext<Pre_elseContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 12) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE) | (1L << SWITCH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0)) {
				{
				State = 176;
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 170; pre_opener();
					}
					break;

				case 2:
					{
					State = 171; pre_closer();
					}
					break;

				case 3:
					{
					State = 172; pre_else();
					preProcSkipToEnd(); 
					}
					break;

				case 4:
					{
					State = 175; statement();
					}
					break;
				}
				}
				State = 180;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public WaterContext water() {
			return GetRuleContext<WaterContext>(0);
		}
		public Simple_declContext simple_decl() {
			return GetRuleContext<Simple_declContext>(0);
		}
		public Closing_curlyContext closing_curly() {
			return GetRuleContext<Closing_curlyContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Block_starterContext block_starter() {
			return GetRuleContext<Block_starterContext>(0);
		}
		public Opening_curlyContext opening_curly() {
			return GetRuleContext<Opening_curlyContext>(0);
		}
		public Expr_statementContext expr_statement() {
			return GetRuleContext<Expr_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 189;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; opening_curly();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; closing_curly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183; block_starter();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 184; jump_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 185; label();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 186; simple_decl();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 187; expr_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 188; water();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_openerContext : ParserRuleContext {
		public ITerminalNode PRE_IF() { return GetToken(FunctionParser.PRE_IF, 0); }
		public Pre_openerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pre_opener; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPre_opener(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPre_opener(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_opener(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_openerContext pre_opener() {
		Pre_openerContext _localctx = new Pre_openerContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_pre_opener);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(PRE_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_elseContext : ParserRuleContext {
		public ITerminalNode PRE_ELSE() { return GetToken(FunctionParser.PRE_ELSE, 0); }
		public Pre_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pre_else; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPre_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPre_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_elseContext pre_else() {
		Pre_elseContext _localctx = new Pre_elseContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_pre_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(PRE_ELSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_closerContext : ParserRuleContext {
		public ITerminalNode PRE_ENDIF() { return GetToken(FunctionParser.PRE_ENDIF, 0); }
		public Pre_closerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pre_closer; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPre_closer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPre_closer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_closer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_closerContext pre_closer() {
		Pre_closerContext _localctx = new Pre_closerContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pre_closer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(PRE_ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opening_curlyContext : ParserRuleContext {
		public Opening_curlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_opening_curly; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterOpening_curly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitOpening_curly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpening_curly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opening_curlyContext opening_curly() {
		Opening_curlyContext _localctx = new Opening_curlyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_opening_curly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(OPENING_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Closing_curlyContext : ParserRuleContext {
		public Closing_curlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_closing_curly; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterClosing_curly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitClosing_curly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosing_curly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Closing_curlyContext closing_curly() {
		Closing_curlyContext _localctx = new Closing_curlyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_closing_curly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(CLOSING_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_starterContext : ParserRuleContext {
		public Selection_or_iterationContext selection_or_iteration() {
			return GetRuleContext<Selection_or_iterationContext>(0);
		}
		public Block_starterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_block_starter; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBlock_starter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBlock_starter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_starter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_starterContext block_starter() {
		Block_starterContext _localctx = new Block_starterContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block_starter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; selection_or_iteration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_or_iterationContext : ParserRuleContext {
		public Selection_or_iterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selection_or_iteration; }
	 
		public Selection_or_iterationContext() { }
		public virtual void CopyFrom(Selection_or_iterationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Else_statementContext : Selection_or_iterationContext {
		public ITerminalNode ELSE() { return GetToken(FunctionParser.ELSE, 0); }
		public Else_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Catch_statementContext : Selection_or_iterationContext {
		public Param_typeContext param_type() {
			return GetRuleContext<Param_typeContext>(0);
		}
		public ITerminalNode CATCH() { return GetToken(FunctionParser.CATCH, 0); }
		public Catch_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterCatch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitCatch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Switch_statementContext : Selection_or_iterationContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(FunctionParser.SWITCH, 0); }
		public Switch_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Do_statementContext : Selection_or_iterationContext {
		public ITerminalNode DO() { return GetToken(FunctionParser.DO, 0); }
		public Do_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_statementContext : Selection_or_iterationContext {
		public ITerminalNode IF() { return GetToken(FunctionParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public If_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_statementContext : Selection_or_iterationContext {
		public ITerminalNode WHILE() { return GetToken(FunctionParser.WHILE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public While_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_statementContext : Selection_or_iterationContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(FunctionParser.FOR, 0); }
		public For_init_statementContext for_init_statement() {
			return GetRuleContext<For_init_statementContext>(0);
		}
		public For_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_statementContext : Selection_or_iterationContext {
		public ITerminalNode TRY() { return GetToken(FunctionParser.TRY, 0); }
		public Try_statementContext(Selection_or_iterationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_or_iterationContext selection_or_iteration() {
		Selection_or_iterationContext _localctx = new Selection_or_iterationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_selection_or_iteration);
		int _la;
		try {
			State = 238;
			switch (_input.La(1)) {
			case TRY:
				_localctx = new Try_statementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(TRY);
				}
				break;
			case CATCH:
				_localctx = new Catch_statementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(CATCH);
				State = 205; Match(30);
				State = 206; param_type();
				State = 207; Match(12);
				}
				break;
			case IF:
				_localctx = new If_statementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 209; Match(IF);
				State = 210; Match(30);
				State = 211; condition();
				State = 212; Match(12);
				}
				break;
			case ELSE:
				_localctx = new Else_statementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 214; Match(ELSE);
				}
				break;
			case SWITCH:
				_localctx = new Switch_statementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 215; Match(SWITCH);
				State = 216; Match(30);
				State = 217; condition();
				State = 218; Match(12);
				}
				break;
			case FOR:
				_localctx = new For_statementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 220; Match(FOR);
				State = 221; Match(30);
				State = 222; for_init_statement();
				State = 224;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VOID - 68)) | (1L << (UNSIGNED - 68)) | (1L << (SIGNED - 68)) | (1L << (LONG - 68)) | (1L << (CV_QUALIFIER - 68)) | (1L << (CLASS_KEY - 68)) | (1L << (ALPHA_NUMERIC - 68)) | (1L << (HEX_LITERAL - 68)) | (1L << (DECIMAL_LITERAL - 68)) | (1L << (OCTAL_LITERAL - 68)) | (1L << (FLOATING_POINT_LITERAL - 68)) | (1L << (CHAR - 68)) | (1L << (STRING - 68)))) != 0)) {
					{
					State = 223; condition();
					}
				}

				State = 226; Match(46);
				State = 228;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
					{
					State = 227; expr();
					}
				}

				State = 230; Match(12);
				}
				break;
			case DO:
				_localctx = new Do_statementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 232; Match(DO);
				}
				break;
			case WHILE:
				_localctx = new While_statementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 233; Match(WHILE);
				State = 234; Match(30);
				State = 235; condition();
				State = 236; Match(12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statement1Context : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(FunctionParser.WHILE, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode DO() { return GetToken(FunctionParser.DO, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Do_statement1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_do_statement1; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterDo_statement1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitDo_statement1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_statement1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_statement1Context do_statement1() {
		Do_statement1Context _localctx = new Do_statement1Context(_ctx, State);
		EnterRule(_localctx, 18, RULE_do_statement1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(DO);
			State = 241; statement();
			State = 242; Match(WHILE);
			State = 243; Match(30);
			State = 244; expr();
			State = 245; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_init_statementContext : ParserRuleContext {
		public Simple_declContext simple_decl() {
			return GetRuleContext<Simple_declContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public For_init_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_for_init_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFor_init_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFor_init_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_init_statementContext for_init_statement() {
		For_init_statementContext _localctx = new For_init_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_for_init_statement);
		int _la;
		try {
			State = 252;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; simple_decl();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
					{
					State = 248; expr();
					}
				}

				State = 251; Match(46);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_jump_statement; }
	 
		public Jump_statementContext() { }
		public virtual void CopyFrom(Jump_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnStatementContext : Jump_statementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(FunctionParser.RETURN, 0); }
		public ReturnStatementContext(Jump_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStatementContext : Jump_statementContext {
		public ITerminalNode GOTO() { return GetToken(FunctionParser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GotoStatementContext(Jump_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Jump_statementContext {
		public ITerminalNode BREAK() { return GetToken(FunctionParser.BREAK, 0); }
		public BreakStatementContext(Jump_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Jump_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(FunctionParser.CONTINUE, 0); }
		public ContinueStatementContext(Jump_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_jump_statement);
		int _la;
		try {
			State = 267;
			switch (_input.La(1)) {
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(BREAK);
				State = 255; Match(46);
				}
				break;
			case CONTINUE:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(CONTINUE);
				State = 257; Match(46);
				}
				break;
			case GOTO:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 258; Match(GOTO);
				State = 259; identifier();
				State = 260; Match(46);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 262; Match(RETURN);
				State = 264;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
					{
					State = 263; expr();
					}
				}

				State = 266; Match(46);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(FunctionParser.CASE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_label; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = _input.La(1);
			if (_la==CASE) {
				{
				State = 269; Match(CASE);
				}
			}

			State = 274;
			switch (_input.La(1)) {
			case 26:
			case 32:
			case 45:
			case ALPHA_NUMERIC:
				{
				State = 272; identifier();
				}
				break;
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
				{
				State = 273; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 276; Match(29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_statementContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expr_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterExpr_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitExpr_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_statementContext expr_statement() {
		Expr_statementContext _localctx = new Expr_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expr_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
				{
				State = 278; expr();
				}
			}

			State = 281; Match(46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condition; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_condition);
		try {
			State = 289;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; expr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; type_name();
				State = 285; declarator();
				State = 286; Match(16);
				State = 287; assign_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 20) | (1L << 28) | (1L << 44) | (1L << 54))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relational_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 7) | (1L << 49) | (1L << 55))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(FunctionParser.OCTAL_LITERAL, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(FunctionParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(FunctionParser.FLOATING_POINT_LITERAL, 0); }
		public ITerminalNode CHAR() { return GetToken(FunctionParser.CHAR, 0); }
		public ITerminalNode STRING() { return GetToken(FunctionParser.STRING, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(FunctionParser.HEX_LITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = _input.La(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (HEX_LITERAL - 90)) | (1L << (DECIMAL_LITERAL - 90)) | (1L << (OCTAL_LITERAL - 90)) | (1L << (FLOATING_POINT_LITERAL - 90)) | (1L << (CHAR - 90)) | (1L << (STRING - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_decl_specifiersContext : ParserRuleContext {
		public Function_decl_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_decl_specifiers; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFunction_decl_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFunction_decl_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_decl_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_decl_specifiersContext function_decl_specifiers() {
		Function_decl_specifiersContext _localctx = new Function_decl_specifiersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_function_decl_specifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = _input.La(1);
			if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (13 - 13)) | (1L << (14 - 13)) | (1L << (37 - 13)) | (1L << (38 - 13)) | (1L << (VIRTUAL - 13)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ptr_operatorContext : ParserRuleContext {
		public Ptr_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ptr_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPtr_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPtr_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtr_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ptr_operatorContext ptr_operator() {
		Ptr_operatorContext _localctx = new Ptr_operatorContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_ptr_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = _input.La(1);
			if ( !(_la==1 || _la==3) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_specifierContext : ParserRuleContext {
		public Access_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_access_specifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAccess_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAccess_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_specifierContext access_specifier() {
		Access_specifierContext _localctx = new Access_specifierContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_access_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 26) | (1L << 32) | (1L << 45))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_operator);
		int _la;
		try {
			State = 348;
			switch (_input.La(1)) {
			case 18:
			case 42:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 303;
				_la = _input.La(1);
				if ( !(_la==18 || _la==42) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 306;
				_la = _input.La(1);
				if (_la==2) {
					{
					State = 304; Match(2);
					State = 305; Match(23);
					}
				}

				}
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; Match(44);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309; Match(28);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310; Match(3);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311; Match(53);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 312; Match(9);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313; Match(41);
				}
				break;
			case 1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 314; Match(1);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 9);
				{
				State = 315; Match(19);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 10);
				{
				State = 316; Match(54);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 11);
				{
				State = 317; Match(20);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 12);
				{
				State = 318; Match(16);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 13);
				{
				State = 319; Match(4);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 14);
				{
				State = 320; Match(49);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 15);
				{
				State = 321; Match(35);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 16);
				{
				State = 322; Match(24);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 17);
				{
				State = 323; Match(11);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 18);
				{
				State = 324; Match(51);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 19);
				{
				State = 325; Match(50);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 20);
				{
				State = 326; Match(36);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 21);
				{
				State = 327; Match(31);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 22);
				{
				State = 328; Match(17);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 23);
				{
				State = 329; Match(40);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 24);
				{
				State = 330; Match(8);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 25);
				{
				State = 331; Match(34);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 26);
				{
				State = 332; Match(22);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 27);
				{
				State = 333; Match(52);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 28);
				{
				State = 334; Match(6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 29);
				{
				State = 335; Match(7);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 30);
				{
				State = 336; Match(55);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 31);
				{
				State = 337; Match(47);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 32);
				{
				State = 338; Match(48);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 33);
				{
				State = 339; Match(39);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 34);
				{
				State = 340; Match(5);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 35);
				{
				State = 341; Match(27);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 36);
				{
				State = 342; Match(25);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 37);
				{
				State = 343; Match(10);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 38);
				{
				State = 344; Match(30);
				State = 345; Match(12);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 39);
				{
				State = 346; Match(2);
				State = 347; Match(23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignment_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 11) | (1L << 16) | (1L << 17) | (1L << 22) | (1L << 24) | (1L << 31) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 50) | (1L << 51))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_equality_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = _input.La(1);
			if ( !(_la==6 || _la==52) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_decl_startContext : ParserRuleContext {
		public ITerminalNode TEMPLATE() { return GetToken(FunctionParser.TEMPLATE, 0); }
		public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Template_decl_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_template_decl_start; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterTemplate_decl_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitTemplate_decl_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_decl_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_decl_startContext template_decl_start() {
		Template_decl_startContext _localctx = new Template_decl_startContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_template_decl_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(TEMPLATE);
			State = 355; Match(4);
			State = 356; template_param_list();
			State = 357; Match(49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_listContext : ParserRuleContext {
		public Template_param_listContext template_param_list(int i) {
			return GetRuleContext<Template_param_listContext>(i);
		}
		public IReadOnlyList<No_angle_brackets_or_bracketsContext> no_angle_brackets_or_brackets() {
			return GetRuleContexts<No_angle_brackets_or_bracketsContext>();
		}
		public No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets(int i) {
			return GetRuleContext<No_angle_brackets_or_bracketsContext>(i);
		}
		public IReadOnlyList<Template_param_listContext> template_param_list() {
			return GetRuleContexts<Template_param_listContext>();
		}
		public Template_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_template_param_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterTemplate_param_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitTemplate_param_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_listContext template_param_list() {
		Template_param_listContext _localctx = new Template_param_listContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_template_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 368;
				switch (_input.La(1)) {
				case 4:
					{
					{
					State = 359; Match(4);
					State = 360; template_param_list();
					State = 361; Match(49);
					}
					}
					break;
				case 30:
					{
					{
					State = 363; Match(30);
					State = 364; template_param_list();
					State = 365; Match(12);
					}
					}
					break;
				case 1:
				case 2:
				case 3:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 13:
				case 14:
				case 15:
				case 16:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27:
				case 28:
				case 29:
				case 31:
				case 32:
				case 33:
				case 34:
				case 35:
				case 36:
				case 37:
				case 38:
				case 39:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case IF:
				case ELSE:
				case FOR:
				case WHILE:
				case BREAK:
				case CASE:
				case CONTINUE:
				case SWITCH:
				case DO:
				case GOTO:
				case RETURN:
				case TYPEDEF:
				case VOID:
				case UNSIGNED:
				case SIGNED:
				case LONG:
				case CV_QUALIFIER:
				case VIRTUAL:
				case TRY:
				case CATCH:
				case THROW:
				case USING:
				case NAMESPACE:
				case AUTO:
				case REGISTER:
				case OPERATOR:
				case TEMPLATE:
				case CLASS_KEY:
				case ALPHA_NUMERIC:
				case OPENING_CURLY:
				case CLOSING_CURLY:
				case PRE_IF:
				case PRE_ELSE:
				case PRE_ENDIF:
				case HEX_LITERAL:
				case DECIMAL_LITERAL:
				case OCTAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHAR:
				case STRING:
				case COMMENT:
				case WHITESPACE:
				case CPPCOMMENT:
				case OTHER:
					{
					State = 367; no_angle_brackets_or_brackets();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 8) | (1L << 9) | (1L << 10) | (1L << 11) | (1L << 13) | (1L << 14) | (1L << 15) | (1L << 16) | (1L << 17) | (1L << 18) | (1L << 19) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 30) | (1L << 31) | (1L << 32) | (1L << 33) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 37) | (1L << 38) | (1L << 39) | (1L << 40) | (1L << 41) | (1L << 42) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 53) | (1L << 54) | (1L << 55) | (1L << IF) | (1L << ELSE) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CASE) | (1L << CONTINUE) | (1L << SWITCH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64)) | (1L << (VOID - 64)) | (1L << (UNSIGNED - 64)) | (1L << (SIGNED - 64)) | (1L << (LONG - 64)) | (1L << (CV_QUALIFIER - 64)) | (1L << (VIRTUAL - 64)) | (1L << (TRY - 64)) | (1L << (CATCH - 64)) | (1L << (THROW - 64)) | (1L << (USING - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AUTO - 64)) | (1L << (REGISTER - 64)) | (1L << (OPERATOR - 64)) | (1L << (TEMPLATE - 64)) | (1L << (CLASS_KEY - 64)) | (1L << (ALPHA_NUMERIC - 64)) | (1L << (OPENING_CURLY - 64)) | (1L << (CLOSING_CURLY - 64)) | (1L << (PRE_IF - 64)) | (1L << (PRE_ELSE - 64)) | (1L << (PRE_ENDIF - 64)) | (1L << (HEX_LITERAL - 64)) | (1L << (DECIMAL_LITERAL - 64)) | (1L << (OCTAL_LITERAL - 64)) | (1L << (FLOATING_POINT_LITERAL - 64)) | (1L << (CHAR - 64)) | (1L << (STRING - 64)) | (1L << (COMMENT - 64)) | (1L << (WHITESPACE - 64)) | (1L << (CPPCOMMENT - 64)) | (1L << (OTHER - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_bracketsContext : ParserRuleContext {
		public No_bracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_brackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_brackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_bracketsContext no_brackets() {
		No_bracketsContext _localctx = new No_bracketsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_no_brackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==12 || _la==30) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_brackets_curlies_or_squaresContext : ParserRuleContext {
		public No_brackets_curlies_or_squaresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets_curlies_or_squares; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_brackets_curlies_or_squares(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_brackets_curlies_or_squares(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets_curlies_or_squares(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_brackets_curlies_or_squaresContext no_brackets_curlies_or_squares() {
		No_brackets_curlies_or_squaresContext _localctx = new No_brackets_curlies_or_squaresContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_no_brackets_curlies_or_squares);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 12) | (1L << 23) | (1L << 30))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_brackets_or_semicolonContext : ParserRuleContext {
		public No_brackets_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_brackets_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_brackets_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_brackets_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_brackets_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_brackets_or_semicolonContext no_brackets_or_semicolon() {
		No_brackets_or_semicolonContext _localctx = new No_brackets_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_no_brackets_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 12) | (1L << 30) | (1L << 46))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_angle_brackets_or_bracketsContext : ParserRuleContext {
		public No_angle_brackets_or_bracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_angle_brackets_or_brackets; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_angle_brackets_or_brackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_angle_brackets_or_brackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_angle_brackets_or_brackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets() {
		No_angle_brackets_or_bracketsContext _localctx = new No_angle_brackets_or_bracketsContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_no_angle_brackets_or_brackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 12) | (1L << 30) | (1L << 49))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_curliesContext : ParserRuleContext {
		public No_curliesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_curlies; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_curlies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_curlies(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_curlies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_curliesContext no_curlies() {
		No_curliesContext _localctx = new No_curliesContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_no_curlies);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_squaresContext : ParserRuleContext {
		public No_squaresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_squares; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_squares(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_squares(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_squares(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_squaresContext no_squares() {
		No_squaresContext _localctx = new No_squaresContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_no_squares);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==2 || _la==23) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_squares_or_semicolonContext : ParserRuleContext {
		public No_squares_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_squares_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_squares_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_squares_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_squares_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_squares_or_semicolonContext no_squares_or_semicolon() {
		No_squares_or_semicolonContext _localctx = new No_squares_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_no_squares_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 23) | (1L << 46))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_comma_or_semicolonContext : ParserRuleContext {
		public No_comma_or_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_no_comma_or_semicolon; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNo_comma_or_semicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNo_comma_or_semicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo_comma_or_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_comma_or_semicolonContext no_comma_or_semicolon() {
		No_comma_or_semicolonContext _localctx = new No_comma_or_semicolonContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_no_comma_or_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = _input.La(1);
			if ( _la <= 0 || (_la==27 || _la==46) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_waterContext : ParserRuleContext {
		public Assign_waterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_water; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAssign_water(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAssign_water(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_water(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_waterContext assign_water() {
		Assign_waterContext _localctx = new Assign_waterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assign_water);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 12) | (1L << 23) | (1L << 27) | (1L << 30) | (1L << 46))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_water_l2Context : ParserRuleContext {
		public Assign_water_l2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_water_l2; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAssign_water_l2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAssign_water_l2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_water_l2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_water_l2Context assign_water_l2() {
		Assign_water_l2Context _localctx = new Assign_water_l2Context(_ctx, State);
		EnterRule(_localctx, 70, RULE_assign_water_l2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = _input.La(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 12) | (1L << 23) | (1L << 30))) != 0) || _la==OPENING_CURLY || _la==CLOSING_CURLY) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaterContext : ParserRuleContext {
		public WaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_water; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterWater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitWater(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWater(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaterContext water() {
		WaterContext _localctx = new WaterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_water);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; assign_expr();
			State = 397;
			_la = _input.La(1);
			if (_la==27) {
				{
				State = 395; Match(27);
				State = 396; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_exprContext : ParserRuleContext {
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Assign_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assign_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAssign_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAssign_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_exprContext assign_expr() {
		Assign_exprContext _localctx = new Assign_exprContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assign_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; conditional_expression();
			State = 403;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 11) | (1L << 16) | (1L << 17) | (1L << 22) | (1L << 24) | (1L << 31) | (1L << 34) | (1L << 35) | (1L << 36) | (1L << 50) | (1L << 51))) != 0)) {
				{
				State = 400; assignment_operator();
				State = 401; assign_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditional_expression; }
	 
		public Conditional_expressionContext() { }
		public virtual void CopyFrom(Conditional_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormOrContext : Conditional_expressionContext {
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public NormOrContext(Conditional_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNormOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNormOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CndExprContext : Conditional_expressionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public CndExprContext(Conditional_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterCndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitCndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_conditional_expression);
		try {
			State = 412;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				_localctx = new NormOrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; or_expression();
				}
				break;

			case 2:
				_localctx = new CndExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; or_expression();
				{
				State = 407; Match(33);
				State = 408; expr();
				State = 409; Match(29);
				State = 410; conditional_expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; and_expression();
			State = 417;
			_la = _input.La(1);
			if (_la==48) {
				{
				State = 415; Match(48);
				State = 416; or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_and_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; inclusive_or_expression();
			State = 422;
			_la = _input.La(1);
			if (_la==47) {
				{
				State = 420; Match(47);
				State = 421; and_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_inclusive_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; exclusive_or_expression();
			State = 427;
			_la = _input.La(1);
			if (_la==19) {
				{
				State = 425; Match(19);
				State = 426; inclusive_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_exclusive_or_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; bit_and_expression();
			State = 432;
			_la = _input.La(1);
			if (_la==41) {
				{
				State = 430; Match(41);
				State = 431; exclusive_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bit_and_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBit_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBit_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBit_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_bit_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; equality_expression();
			State = 437;
			_la = _input.La(1);
			if (_la==1) {
				{
				State = 435; Match(1);
				State = 436; bit_and_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public Equality_operatorContext equality_operator() {
			return GetRuleContext<Equality_operatorContext>(0);
		}
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_equality_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; relational_expression();
			State = 443;
			_la = _input.La(1);
			if (_la==6 || _la==52) {
				{
				State = 440; equality_operator();
				State = 441; equality_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relational_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; shift_expression();
			State = 449;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 7) | (1L << 49) | (1L << 55))) != 0)) {
				{
				State = 446; relational_operator();
				State = 447; relational_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shift_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; additive_expression();
			State = 454;
			_la = _input.La(1);
			if (_la==8 || _la==40) {
				{
				State = 452;
				_la = _input.La(1);
				if ( !(_la==8 || _la==40) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 453; shift_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_additive_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; multiplicative_expression();
			State = 459;
			_la = _input.La(1);
			if (_la==28 || _la==44) {
				{
				State = 457;
				_la = _input.La(1);
				if ( !(_la==28 || _la==44) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 458; additive_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multiplicative_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; cast_expression();
			State = 464;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 9) | (1L << 53))) != 0)) {
				{
				State = 462;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 9) | (1L << 53))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 463; multiplicative_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Cast_targetContext cast_target() {
			return GetRuleContext<Cast_targetContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cast_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_cast_expression);
		try {
			State = 472;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 466; Match(30);
				State = 467; cast_target();
				State = 468; Match(12);
				State = 469; cast_expression();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_targetContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cast_target; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterCast_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitCast_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_targetContext cast_target() {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_cast_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; type_name();
			State = 478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==3) {
				{
				{
				State = 475; ptr_operator();
				}
				}
				State = 480;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return GetRuleContext<Sizeof_expressionContext>(0);
		}
		public Inc_decContext inc_dec() {
			return GetRuleContext<Inc_decContext>(0);
		}
		public Unary_op_and_cast_exprContext unary_op_and_cast_expr() {
			return GetRuleContext<Unary_op_and_cast_exprContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_unary_expression);
		try {
			State = 487;
			switch (_input.La(1)) {
			case 5:
			case 39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481; inc_dec();
				State = 482; cast_expression();
				}
				break;
			case 1:
			case 3:
			case 20:
			case 28:
			case 44:
			case 54:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484; unary_op_and_cast_expr();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 485; sizeof_expression();
				}
				break;
			case 26:
			case 30:
			case 32:
			case 45:
			case ALPHA_NUMERIC:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 486; postfix_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_op_and_cast_exprContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_op_and_cast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unary_op_and_cast_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterUnary_op_and_cast_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitUnary_op_and_cast_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_op_and_cast_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_op_and_cast_exprContext unary_op_and_cast_expr() {
		Unary_op_and_cast_exprContext _localctx = new Unary_op_and_cast_exprContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_unary_op_and_cast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; unary_operator();
			State = 490; cast_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_expressionContext : ParserRuleContext {
		public Sizeof_operand2Context sizeof_operand2() {
			return GetRuleContext<Sizeof_operand2Context>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public Sizeof_operandContext sizeof_operand() {
			return GetRuleContext<Sizeof_operandContext>(0);
		}
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSizeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSizeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_expressionContext sizeof_expression() {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_sizeof_expression);
		try {
			State = 500;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 492; @sizeof();
				State = 493; Match(30);
				State = 494; sizeof_operand();
				State = 495; Match(12);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497; @sizeof();
				State = 498; sizeof_operand2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_operandContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public Sizeof_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_operand; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSizeof_operand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSizeof_operand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_operandContext sizeof_operand() {
		Sizeof_operandContext _localctx = new Sizeof_operandContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_sizeof_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; type_name();
			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==3) {
				{
				{
				State = 505; ptr_operator();
				}
				}
				State = 510;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_operand2Context : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Sizeof_operand2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sizeof_operand2; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSizeof_operand2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSizeof_operand2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_operand2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_operand2Context sizeof_operand2() {
		Sizeof_operand2Context _localctx = new Sizeof_operand2Context(_ctx, State);
		EnterRule(_localctx, 114, RULE_sizeof_operand2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inc_decContext : ParserRuleContext {
		public Inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_inc_dec; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInc_dec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInc_dec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInc_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inc_decContext inc_dec() {
		Inc_decContext _localctx = new Inc_decContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = _input.La(1);
			if ( !(_la==5 || _la==39) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_postfix_expression; }
	 
		public Postfix_expressionContext() { }
		public virtual void CopyFrom(Postfix_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryOnlyContext : Postfix_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public PrimaryOnlyContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPrimaryOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPrimaryOnly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PtrMemberAccessContext : Postfix_expressionContext {
		public ITerminalNode TEMPLATE() { return GetToken(FunctionParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public PtrMemberAccessContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPtrMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPtrMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexingContext : Postfix_expressionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public ArrayIndexingContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterArrayIndexing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitArrayIndexing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecOpContext : Postfix_expressionContext {
		public Inc_decContext inc_dec() {
			return GetRuleContext<Inc_decContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public IncDecOpContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterIncDecOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitIncDecOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : Postfix_expressionContext {
		public ITerminalNode TEMPLATE() { return GetToken(FunctionParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public MemberAccessContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : Postfix_expressionContext {
		public Function_argument_listContext function_argument_list() {
			return GetRuleContext<Function_argument_listContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public FuncCallContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		return postfix_expression(0);
	}

	private Postfix_expressionContext postfix_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Postfix_expressionContext _localctx = new Postfix_expressionContext(_ctx, _parentState);
		Postfix_expressionContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_postfix_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryOnlyContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 516; primary_expression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 544;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 542;
					switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						_localctx = new ArrayIndexingContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 518;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 519; Match(2);
						State = 520; expr();
						State = 521; Match(23);
						}
						break;

					case 2:
						{
						_localctx = new FuncCallContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 523;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 524; Match(30);
						State = 525; function_argument_list();
						State = 526; Match(12);
						}
						break;

					case 3:
						{
						_localctx = new MemberAccessContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 528;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 529; Match(43);
						State = 531;
						_la = _input.La(1);
						if (_la==TEMPLATE) {
							{
							State = 530; Match(TEMPLATE);
							}
						}

						{
						State = 533; identifier();
						}
						}
						break;

					case 4:
						{
						_localctx = new PtrMemberAccessContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 534;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 535; Match(10);
						State = 537;
						_la = _input.La(1);
						if (_la==TEMPLATE) {
							{
							State = 536; Match(TEMPLATE);
							}
						}

						{
						State = 539; identifier();
						}
						}
						break;

					case 5:
						{
						_localctx = new IncDecOpContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 540;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 541; inc_dec();
						}
						break;
					}
					} 
				}
				State = 546;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_argument_listContext : ParserRuleContext {
		public Function_argumentContext function_argument(int i) {
			return GetRuleContext<Function_argumentContext>(i);
		}
		public IReadOnlyList<Function_argumentContext> function_argument() {
			return GetRuleContexts<Function_argumentContext>();
		}
		public Function_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_argument_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFunction_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFunction_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_listContext function_argument_list() {
		Function_argument_listContext _localctx = new Function_argument_listContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_function_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
				{
				State = 547; function_argument();
				State = 552;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==27) {
					{
					{
					State = 548; Match(27);
					State = 549; function_argument();
					}
					}
					State = 554;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_function_argument; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterFunction_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitFunction_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_function_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; assign_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primary_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_primary_expression);
		try {
			State = 565;
			switch (_input.La(1)) {
			case 26:
			case 32:
			case 45:
			case ALPHA_NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559; identifier();
				}
				break;
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560; constant();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561; Match(30);
				State = 562; expr();
				State = 563; Match(12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declaratorContext : ParserRuleContext {
		public Init_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init_declarator; }
	 
		public Init_declaratorContext() { }
		public virtual void CopyFrom(Init_declaratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitDeclWithCallContext : Init_declaratorContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitDeclWithCallContext(Init_declaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInitDeclWithCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInitDeclWithCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclWithCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitDeclSimpleContext : Init_declaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitDeclSimpleContext(Init_declaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInitDeclSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInitDeclSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitDeclWithAssignContext : Init_declaratorContext {
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitDeclWithAssignContext(Init_declaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInitDeclWithAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInitDeclWithAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclWithAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declaratorContext init_declarator() {
		Init_declaratorContext _localctx = new Init_declaratorContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_init_declarator);
		int _la;
		try {
			State = 579;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				_localctx = new InitDeclWithCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 567; declarator();
				State = 568; Match(30);
				State = 570;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
					{
					State = 569; expr();
					}
				}

				State = 572; Match(12);
				}
				break;

			case 2:
				_localctx = new InitDeclWithAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 574; declarator();
				State = 575; Match(16);
				State = 576; initializer();
				}
				break;

			case 3:
				_localctx = new InitDeclSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 578; declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrsContext ptrs() {
			return GetRuleContext<PtrsContext>(0);
		}
		public Type_suffixContext type_suffix() {
			return GetRuleContext<Type_suffixContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_declarator; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = _input.La(1);
			if (_la==1 || _la==3) {
				{
				State = 581; ptrs();
				}
			}

			State = 584; identifier();
			State = 586;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 585; type_suffix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_suffixContext : ParserRuleContext {
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Param_type_listContext param_type_list() {
			return GetRuleContext<Param_type_listContext>(0);
		}
		public Type_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type_suffix; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterType_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitType_suffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_suffixContext type_suffix() {
		Type_suffixContext _localctx = new Type_suffixContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_type_suffix);
		int _la;
		try {
			State = 594;
			switch (_input.La(1)) {
			case 2:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 588; Match(2);
				State = 590;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 39) | (1L << 44) | (1L << 45) | (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84)) | (1L << (OCTAL_LITERAL - 84)) | (1L << (FLOATING_POINT_LITERAL - 84)) | (1L << (CHAR - 84)) | (1L << (STRING - 84)))) != 0)) {
					{
					State = 589; conditional_expression();
					}
				}

				State = 592; Match(23);
				}
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; param_type_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_declContext : ParserRuleContext {
		public ITerminalNode TYPEDEF() { return GetToken(FunctionParser.TYPEDEF, 0); }
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Template_decl_startContext template_decl_start() {
			return GetRuleContext<Template_decl_startContext>(0);
		}
		public Simple_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_simple_decl; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterSimple_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitSimple_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_declContext simple_decl() {
		Simple_declContext _localctx = new Simple_declContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_simple_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 597;
			_la = _input.La(1);
			if (_la==TYPEDEF) {
				{
				State = 596; Match(TYPEDEF);
				}
			}

			State = 600;
			_la = _input.La(1);
			if (_la==TEMPLATE) {
				{
				State = 599; template_decl_start();
				}
			}

			}
			State = 602; var_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_var_decl; }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclByClassContext : Var_declContext {
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		public DeclByClassContext(Var_declContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterDeclByClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitDeclByClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclByClass(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclByTypeContext : Var_declContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public DeclByTypeContext(Var_declContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterDeclByType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitDeclByType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclByType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_var_decl);
		try {
			State = 611;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				_localctx = new DeclByClassContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 604; class_def();
				State = 606;
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 605; init_declarator_list();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new DeclByTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 608; type_name();
				State = 609; init_declarator_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declarator_listContext : ParserRuleContext {
		public Init_declaratorContext init_declarator(int i) {
			return GetRuleContext<Init_declaratorContext>(i);
		}
		public IReadOnlyList<Init_declaratorContext> init_declarator() {
			return GetRuleContexts<Init_declaratorContext>();
		}
		public Init_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init_declarator_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInit_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInit_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declarator_listContext init_declarator_list() {
		Init_declarator_listContext _localctx = new Init_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_init_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; init_declarator();
			State = 618;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 614; Match(27);
				State = 615; init_declarator();
				}
				}
				State = 620;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 621; Match(46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Initializer_listContext initializer_list() {
			return GetRuleContext<Initializer_listContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initializer; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_initializer);
		try {
			State = 628;
			switch (_input.La(1)) {
			case 1:
			case 3:
			case 5:
			case 20:
			case 21:
			case 26:
			case 28:
			case 30:
			case 32:
			case 39:
			case 44:
			case 45:
			case 54:
			case ALPHA_NUMERIC:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 623; assign_expr();
				}
				break;
			case OPENING_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; Match(OPENING_CURLY);
				State = 625; initializer_list();
				State = 626; Match(CLOSING_CURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_listContext : ParserRuleContext {
		public IReadOnlyList<InitializerContext> initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		public Initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initializer_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterInitializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitInitializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_listContext initializer_list() {
		Initializer_listContext _localctx = new Initializer_listContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_initializer_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; initializer();
			State = 635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 631; Match(27);
				State = 632; initializer();
				}
				}
				State = 637;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		public ITerminalNode CLASS_KEY() { return GetToken(FunctionParser.CLASS_KEY, 0); }
		public ITerminalNode OPENING_CURLY() { return GetToken(FunctionParser.OPENING_CURLY, 0); }
		public Base_classesContext base_classes() {
			return GetRuleContext<Base_classesContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_class_def; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_class_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(CLASS_KEY);
			State = 640;
			_la = _input.La(1);
			if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (26 - 26)) | (1L << (32 - 26)) | (1L << (45 - 26)) | (1L << (ALPHA_NUMERIC - 26)))) != 0)) {
				{
				State = 639; class_name();
				}
			}

			State = 643;
			_la = _input.La(1);
			if (_la==29) {
				{
				State = 642; base_classes();
				}
			}

			State = 645; Match(OPENING_CURLY);
			skipToEndOfObject(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_class_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_classesContext : ParserRuleContext {
		public IReadOnlyList<Base_classContext> base_class() {
			return GetRuleContexts<Base_classContext>();
		}
		public Base_classContext base_class(int i) {
			return GetRuleContext<Base_classContext>(i);
		}
		public Base_classesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_classes; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBase_classes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBase_classes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_classes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_classesContext base_classes() {
		Base_classesContext _localctx = new Base_classesContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_base_classes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650; Match(29);
			State = 651; base_class();
			State = 656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==27) {
				{
				{
				State = 652; Match(27);
				State = 653; base_class();
				}
				}
				State = 658;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_classContext : ParserRuleContext {
		public Access_specifierContext access_specifier() {
			return GetRuleContext<Access_specifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode VIRTUAL() { return GetToken(FunctionParser.VIRTUAL, 0); }
		public Base_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_class; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBase_class(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBase_class(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_class(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_classContext base_class() {
		Base_classContext _localctx = new Base_classContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_base_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			_la = _input.La(1);
			if (_la==VIRTUAL) {
				{
				State = 659; Match(VIRTUAL);
				}
			}

			State = 663;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 662; access_specifier();
				}
				break;
			}
			State = 665; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> CV_QUALIFIER() { return GetTokens(FunctionParser.CV_QUALIFIER); }
		public ITerminalNode CLASS_KEY() { return GetToken(FunctionParser.CLASS_KEY, 0); }
		public Template_param_listContext template_param_list(int i) {
			return GetRuleContext<Template_param_listContext>(i);
		}
		public ITerminalNode SIGNED() { return GetToken(FunctionParser.SIGNED, 0); }
		public ITerminalNode CV_QUALIFIER(int i) {
			return GetToken(FunctionParser.CV_QUALIFIER, i);
		}
		public Base_typeContext base_type(int i) {
			return GetRuleContext<Base_typeContext>(i);
		}
		public IReadOnlyList<Base_typeContext> base_type() {
			return GetRuleContexts<Base_typeContext>();
		}
		public ITerminalNode UNSIGNED() { return GetToken(FunctionParser.UNSIGNED, 0); }
		public IReadOnlyList<Template_param_listContext> template_param_list() {
			return GetRuleContexts<Template_param_listContext>();
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_type_name);
		int _la;
		try {
			State = 698;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 670;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CV_QUALIFIER) {
					{
					{
					State = 667; Match(CV_QUALIFIER);
					}
					}
					State = 672;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 674;
				_la = _input.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (CLASS_KEY - 69)))) != 0)) {
					{
					State = 673;
					_la = _input.La(1);
					if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (CLASS_KEY - 69)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 676; base_type();
				State = 681;
				_la = _input.La(1);
				if (_la==4) {
					{
					State = 677; Match(4);
					State = 678; template_param_list();
					State = 679; Match(49);
					}
				}

				State = 693;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==15) {
					{
					{
					State = 683; Match(15);
					State = 684; base_type();
					State = 689;
					_la = _input.La(1);
					if (_la==4) {
						{
						State = 685; Match(4);
						State = 686; template_param_list();
						State = 687; Match(49);
						}
					}

					}
					}
					State = 695;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696; Match(UNSIGNED);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 697; Match(SIGNED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ALPHA_NUMERIC() { return GetTokens(FunctionParser.ALPHA_NUMERIC); }
		public IReadOnlyList<ITerminalNode> LONG() { return GetTokens(FunctionParser.LONG); }
		public ITerminalNode VOID(int i) {
			return GetToken(FunctionParser.VOID, i);
		}
		public IReadOnlyList<ITerminalNode> VOID() { return GetTokens(FunctionParser.VOID); }
		public ITerminalNode LONG(int i) {
			return GetToken(FunctionParser.LONG, i);
		}
		public ITerminalNode ALPHA_NUMERIC(int i) {
			return GetToken(FunctionParser.ALPHA_NUMERIC, i);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_base_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_base_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 700;
					_la = _input.La(1);
					if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VOID - 68)) | (1L << (LONG - 68)) | (1L << (ALPHA_NUMERIC - 68)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 703;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			} while ( _alt!=2 && _alt!=ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_decl_specifiersContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(FunctionParser.AUTO, 0); }
		public ITerminalNode REGISTER() { return GetToken(FunctionParser.REGISTER, 0); }
		public Param_decl_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_decl_specifiers; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterParam_decl_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitParam_decl_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_decl_specifiersContext param_decl_specifiers() {
		Param_decl_specifiersContext _localctx = new Param_decl_specifiersContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_param_decl_specifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			_la = _input.La(1);
			if (_la==AUTO || _la==REGISTER) {
				{
				State = 705;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==REGISTER) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 708; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_type_listContext : ParserRuleContext {
		public IReadOnlyList<Param_typeContext> param_type() {
			return GetRuleContexts<Param_typeContext>();
		}
		public ITerminalNode VOID() { return GetToken(FunctionParser.VOID, 0); }
		public Param_typeContext param_type(int i) {
			return GetRuleContext<Param_typeContext>(i);
		}
		public Param_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterParam_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitParam_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_type_listContext param_type_list() {
		Param_type_listContext _localctx = new Param_type_listContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_param_type_list);
		int _la;
		try {
			State = 727;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; Match(30);
				State = 713; Match(VOID);
				State = 714; Match(12);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 715; Match(30);
				State = 724;
				_la = _input.La(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VOID - 68)) | (1L << (UNSIGNED - 68)) | (1L << (SIGNED - 68)) | (1L << (LONG - 68)) | (1L << (CV_QUALIFIER - 68)) | (1L << (AUTO - 68)) | (1L << (REGISTER - 68)) | (1L << (CLASS_KEY - 68)) | (1L << (ALPHA_NUMERIC - 68)))) != 0)) {
					{
					State = 716; param_type();
					State = 721;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==27) {
						{
						{
						State = 717; Match(27);
						State = 718; param_type();
						}
						}
						State = 723;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 726; Match(12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_typeContext : ParserRuleContext {
		public Param_type_idContext param_type_id() {
			return GetRuleContext<Param_type_idContext>(0);
		}
		public Param_decl_specifiersContext param_decl_specifiers() {
			return GetRuleContext<Param_decl_specifiersContext>(0);
		}
		public Param_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterParam_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitParam_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_typeContext param_type() {
		Param_typeContext _localctx = new Param_typeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_param_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; param_decl_specifiers();
			State = 730; param_type_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_type_idContext : ParserRuleContext {
		public PtrsContext ptrs() {
			return GetRuleContext<PtrsContext>(0);
		}
		public Param_type_idContext param_type_id() {
			return GetRuleContext<Param_type_idContext>(0);
		}
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_suffixContext type_suffix() {
			return GetRuleContext<Type_suffixContext>(0);
		}
		public Param_type_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_param_type_id; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterParam_type_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitParam_type_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_type_idContext param_type_id() {
		Param_type_idContext _localctx = new Param_type_idContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_param_type_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_la = _input.La(1);
			if (_la==1 || _la==3) {
				{
				State = 732; ptrs();
				}
			}

			State = 742;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 735; Match(30);
				State = 736; param_type_id();
				State = 737; Match(12);
				}
				break;

			case 2:
				{
				State = 740;
				_la = _input.La(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (26 - 26)) | (1L << (32 - 26)) | (1L << (45 - 26)) | (1L << (ALPHA_NUMERIC - 26)))) != 0)) {
					{
					State = 739; parameter_name();
					}
				}

				}
				break;
			}
			State = 745;
			_la = _input.La(1);
			if (_la==2 || _la==30) {
				{
				State = 744; type_suffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ALPHA_NUMERIC() { return GetTokens(FunctionParser.ALPHA_NUMERIC); }
		public Access_specifierContext access_specifier() {
			return GetRuleContext<Access_specifierContext>(0);
		}
		public ITerminalNode ALPHA_NUMERIC(int i) {
			return GetToken(FunctionParser.ALPHA_NUMERIC, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_identifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_identifier);
		try {
			int _alt;
			State = 756;
			switch (_input.La(1)) {
			case ALPHA_NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 747; Match(ALPHA_NUMERIC);
				State = 752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
				while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 748; Match(15);
						State = 749; Match(ALPHA_NUMERIC);
						}
						} 
					}
					State = 754;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
				}
				}
				}
				break;
			case 26:
			case 32:
			case 45:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755; access_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(FunctionParser.OCTAL_LITERAL, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(FunctionParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(FunctionParser.HEX_LITERAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_number; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_la = _input.La(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (HEX_LITERAL - 90)) | (1L << (DECIMAL_LITERAL - 90)) | (1L << (OCTAL_LITERAL - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrsContext : ParserRuleContext {
		public IReadOnlyList<Ptr_operatorContext> ptr_operator() {
			return GetRuleContexts<Ptr_operatorContext>();
		}
		public Ptr_operatorContext ptr_operator(int i) {
			return GetRuleContext<Ptr_operatorContext>(i);
		}
		public PtrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ptrs; }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.EnterPtrs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctionListener typedListener = listener as IFunctionListener;
			if (typedListener != null) typedListener.ExitPtrs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctionVisitor<TResult> typedVisitor = visitor as IFunctionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrsContext ptrs() {
		PtrsContext _localctx = new PtrsContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_ptrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 760; ptr_operator();
				}
				}
				State = 763;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==1 || _la==3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 59: return postfix_expression_sempred((Postfix_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfix_expression_sempred(Postfix_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x65\x300\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\a\x2\xB3\n\x2\f\x2\xE\x2\xB6\v\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xC0\n\x3\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x5\n\xE3\n\n\x3\n\x3\n\x5\n\xE7\n\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\xF1\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x5\f\xFC\n\f\x3\f\x5\f\xFF\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\x10B\n\r\x3\r\x5\r\x10E\n\r\x3\xE\x5\xE\x111\n"+
		"\xE\x3\xE\x3\xE\x5\xE\x115\n\xE\x3\xE\x3\xE\x3\xF\x5\xF\x11A\n\xF\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x124\n\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17\x135\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x15F\n\x17\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x173\n\x1B"+
		"\r\x1B\xE\x1B\x174\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3"+
		"\'\x3\'\x5\'\x190\n\'\x3(\x3(\x3(\x3(\x5(\x196\n(\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x5)\x19F\n)\x3*\x3*\x3*\x5*\x1A4\n*\x3+\x3+\x3+\x5+\x1A9\n+\x3"+
		",\x3,\x3,\x5,\x1AE\n,\x3-\x3-\x3-\x5-\x1B3\n-\x3.\x3.\x3.\x5.\x1B8\n."+
		"\x3/\x3/\x3/\x3/\x5/\x1BE\n/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1C4\n"+
		"\x30\x3\x31\x3\x31\x3\x31\x5\x31\x1C9\n\x31\x3\x32\x3\x32\x3\x32\x5\x32"+
		"\x1CE\n\x32\x3\x33\x3\x33\x3\x33\x5\x33\x1D3\n\x33\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x5\x34\x1DB\n\x34\x3\x35\x3\x35\a\x35\x1DF\n\x35"+
		"\f\x35\xE\x35\x1E2\v\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5"+
		"\x36\x1EA\n\x36\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x5\x38\x1F7\n\x38\x3\x39\x3\x39\x3:\x3:\a:\x1FD"+
		"\n:\f:\xE:\x200\v:\x3;\x3;\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x216\n=\x3=\x3=\x3=\x3=\x5=\x21C\n="+
		"\x3=\x3=\x3=\a=\x221\n=\f=\xE=\x224\v=\x3>\x3>\x3>\a>\x229\n>\f>\xE>\x22C"+
		"\v>\x5>\x22E\n>\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x238\n@\x3\x41\x3"+
		"\x41\x3\x41\x5\x41\x23D\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x246\n\x41\x3\x42\x5\x42\x249\n\x42\x3\x42\x3\x42\x5\x42"+
		"\x24D\n\x42\x3\x43\x3\x43\x5\x43\x251\n\x43\x3\x43\x3\x43\x5\x43\x255"+
		"\n\x43\x3\x44\x5\x44\x258\n\x44\x3\x44\x5\x44\x25B\n\x44\x3\x44\x3\x44"+
		"\x3\x45\x3\x45\x5\x45\x261\n\x45\x3\x45\x3\x45\x3\x45\x5\x45\x266\n\x45"+
		"\x3\x46\x3\x46\x3\x46\a\x46\x26B\n\x46\f\x46\xE\x46\x26E\v\x46\x3\x46"+
		"\x3\x46\x3G\x3G\x3G\x3G\x3G\x5G\x277\nG\x3H\x3H\x3H\aH\x27C\nH\fH\xEH"+
		"\x27F\vH\x3I\x3I\x5I\x283\nI\x3I\x5I\x286\nI\x3I\x3I\x3I\x3J\x3J\x3K\x3"+
		"K\x3K\x3K\aK\x291\nK\fK\xEK\x294\vK\x3L\x5L\x297\nL\x3L\x5L\x29A\nL\x3"+
		"L\x3L\x3M\aM\x29F\nM\fM\xEM\x2A2\vM\x3M\x5M\x2A5\nM\x3M\x3M\x3M\x3M\x3"+
		"M\x5M\x2AC\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x2B4\nM\aM\x2B6\nM\fM\xEM\x2B9"+
		"\vM\x3M\x3M\x5M\x2BD\nM\x3N\x6N\x2C0\nN\rN\xEN\x2C1\x3O\x5O\x2C5\nO\x3"+
		"O\x3O\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\aQ\x2D2\nQ\fQ\xEQ\x2D5\vQ\x5"+
		"Q\x2D7\nQ\x3Q\x5Q\x2DA\nQ\x3R\x3R\x3R\x3S\x5S\x2E0\nS\x3S\x3S\x3S\x3S"+
		"\x3S\x5S\x2E7\nS\x5S\x2E9\nS\x3S\x5S\x2EC\nS\x3T\x3T\x3T\aT\x2F1\nT\f"+
		"T\xET\x2F4\vT\x3T\x5T\x2F7\nT\x3U\x3U\x3V\x6V\x2FC\nV\rV\xEV\x2FD\x3V"+
		"\x2\x2\x3xW\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H"+
		"\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66"+
		"\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84"+
		"\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98"+
		"\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\x2"+
		"\x1C\b\x2\x3\x3\x5\x5\x16\x16\x1E\x1E..\x38\x38\x6\x2\x6\x6\t\t\x33\x33"+
		"\x39\x39\x3\x2\\\x61\x5\x2\xF\x10\'(KK\x4\x2\x3\x3\x5\x5\x5\x2\x1C\x1C"+
		"\"\"//\x4\x2\x14\x14,,\t\x2\r\r\x12\x13\x18\x18\x1A\x1A!!$&\x34\x35\x4"+
		"\x2\b\b\x36\x36\x4\x2\xE\xE  \a\x2\x4\x4\xE\xE\x19\x19  WX\x5\x2\xE\xE"+
		"  \x30\x30\x6\x2\x6\x6\xE\xE  \x33\x33\x3\x2WX\x4\x2\x4\x4\x19\x19\x5"+
		"\x2\x4\x4\x19\x19\x30\x30\x4\x2\x1D\x1D\x30\x30\t\x2\x4\x4\xE\xE\x19\x19"+
		"\x1D\x1D  \x30\x30WX\x4\x2\n\n**\x4\x2\x1E\x1E..\x5\x2\x5\x5\v\v\x37\x37"+
		"\x4\x2\a\a))\x4\x2GHUU\x5\x2\x46\x46IIVV\x3\x2QR\x3\x2\\^\x337\x2\xB4"+
		"\x3\x2\x2\x2\x4\xBF\x3\x2\x2\x2\x6\xC1\x3\x2\x2\x2\b\xC3\x3\x2\x2\x2\n"+
		"\xC5\x3\x2\x2\x2\f\xC7\x3\x2\x2\x2\xE\xC9\x3\x2\x2\x2\x10\xCB\x3\x2\x2"+
		"\x2\x12\xF0\x3\x2\x2\x2\x14\xF2\x3\x2\x2\x2\x16\xFE\x3\x2\x2\x2\x18\x10D"+
		"\x3\x2\x2\x2\x1A\x110\x3\x2\x2\x2\x1C\x119\x3\x2\x2\x2\x1E\x123\x3\x2"+
		"\x2\x2 \x125\x3\x2\x2\x2\"\x127\x3\x2\x2\x2$\x129\x3\x2\x2\x2&\x12B\x3"+
		"\x2\x2\x2(\x12D\x3\x2\x2\x2*\x12F\x3\x2\x2\x2,\x15E\x3\x2\x2\x2.\x160"+
		"\x3\x2\x2\x2\x30\x162\x3\x2\x2\x2\x32\x164\x3\x2\x2\x2\x34\x172\x3\x2"+
		"\x2\x2\x36\x176\x3\x2\x2\x2\x38\x178\x3\x2\x2\x2:\x17A\x3\x2\x2\x2<\x17C"+
		"\x3\x2\x2\x2>\x17E\x3\x2\x2\x2@\x180\x3\x2\x2\x2\x42\x182\x3\x2\x2\x2"+
		"\x44\x184\x3\x2\x2\x2\x46\x186\x3\x2\x2\x2H\x188\x3\x2\x2\x2J\x18A\x3"+
		"\x2\x2\x2L\x18C\x3\x2\x2\x2N\x191\x3\x2\x2\x2P\x19E\x3\x2\x2\x2R\x1A0"+
		"\x3\x2\x2\x2T\x1A5\x3\x2\x2\x2V\x1AA\x3\x2\x2\x2X\x1AF\x3\x2\x2\x2Z\x1B4"+
		"\x3\x2\x2\x2\\\x1B9\x3\x2\x2\x2^\x1BF\x3\x2\x2\x2`\x1C5\x3\x2\x2\x2\x62"+
		"\x1CA\x3\x2\x2\x2\x64\x1CF\x3\x2\x2\x2\x66\x1DA\x3\x2\x2\x2h\x1DC\x3\x2"+
		"\x2\x2j\x1E9\x3\x2\x2\x2l\x1EB\x3\x2\x2\x2n\x1F6\x3\x2\x2\x2p\x1F8\x3"+
		"\x2\x2\x2r\x1FA\x3\x2\x2\x2t\x201\x3\x2\x2\x2v\x203\x3\x2\x2\x2x\x205"+
		"\x3\x2\x2\x2z\x22D\x3\x2\x2\x2|\x22F\x3\x2\x2\x2~\x237\x3\x2\x2\x2\x80"+
		"\x245\x3\x2\x2\x2\x82\x248\x3\x2\x2\x2\x84\x254\x3\x2\x2\x2\x86\x257\x3"+
		"\x2\x2\x2\x88\x265\x3\x2\x2\x2\x8A\x267\x3\x2\x2\x2\x8C\x276\x3\x2\x2"+
		"\x2\x8E\x278\x3\x2\x2\x2\x90\x280\x3\x2\x2\x2\x92\x28A\x3\x2\x2\x2\x94"+
		"\x28C\x3\x2\x2\x2\x96\x296\x3\x2\x2\x2\x98\x2BC\x3\x2\x2\x2\x9A\x2BF\x3"+
		"\x2\x2\x2\x9C\x2C4\x3\x2\x2\x2\x9E\x2C8\x3\x2\x2\x2\xA0\x2D9\x3\x2\x2"+
		"\x2\xA2\x2DB\x3\x2\x2\x2\xA4\x2DF\x3\x2\x2\x2\xA6\x2F6\x3\x2\x2\x2\xA8"+
		"\x2F8\x3\x2\x2\x2\xAA\x2FB\x3\x2\x2\x2\xAC\xB3\x5\x6\x4\x2\xAD\xB3\x5"+
		"\n\x6\x2\xAE\xAF\x5\b\x5\x2\xAF\xB0\b\x2\x1\x2\xB0\xB3\x3\x2\x2\x2\xB1"+
		"\xB3\x5\x4\x3\x2\xB2\xAC\x3\x2\x2\x2\xB2\xAD\x3\x2\x2\x2\xB2\xAE\x3\x2"+
		"\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4"+
		"\xB5\x3\x2\x2\x2\xB5\x3\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xC0\x5\f\a"+
		"\x2\xB8\xC0\x5\xE\b\x2\xB9\xC0\x5\x10\t\x2\xBA\xC0\x5\x18\r\x2\xBB\xC0"+
		"\x5\x1A\xE\x2\xBC\xC0\x5\x86\x44\x2\xBD\xC0\x5\x1C\xF\x2\xBE\xC0\x5J&"+
		"\x2\xBF\xB7\x3\x2\x2\x2\xBF\xB8\x3\x2\x2\x2\xBF\xB9\x3\x2\x2\x2\xBF\xBA"+
		"\x3\x2\x2\x2\xBF\xBB\x3\x2\x2\x2\xBF\xBC\x3\x2\x2\x2\xBF\xBD\x3\x2\x2"+
		"\x2\xBF\xBE\x3\x2\x2\x2\xC0\x5\x3\x2\x2\x2\xC1\xC2\aY\x2\x2\xC2\a\x3\x2"+
		"\x2\x2\xC3\xC4\aZ\x2\x2\xC4\t\x3\x2\x2\x2\xC5\xC6\a[\x2\x2\xC6\v\x3\x2"+
		"\x2\x2\xC7\xC8\aW\x2\x2\xC8\r\x3\x2\x2\x2\xC9\xCA\aX\x2\x2\xCA\xF\x3\x2"+
		"\x2\x2\xCB\xCC\x5\x12\n\x2\xCC\x11\x3\x2\x2\x2\xCD\xF1\aL\x2\x2\xCE\xCF"+
		"\aM\x2\x2\xCF\xD0\a \x2\x2\xD0\xD1\x5\xA2R\x2\xD1\xD2\a\xE\x2\x2\xD2\xF1"+
		"\x3\x2\x2\x2\xD3\xD4\a:\x2\x2\xD4\xD5\a \x2\x2\xD5\xD6\x5\x1E\x10\x2\xD6"+
		"\xD7\a\xE\x2\x2\xD7\xF1\x3\x2\x2\x2\xD8\xF1\a;\x2\x2\xD9\xDA\a\x41\x2"+
		"\x2\xDA\xDB\a \x2\x2\xDB\xDC\x5\x1E\x10\x2\xDC\xDD\a\xE\x2\x2\xDD\xF1"+
		"\x3\x2\x2\x2\xDE\xDF\a<\x2\x2\xDF\xE0\a \x2\x2\xE0\xE2\x5\x16\f\x2\xE1"+
		"\xE3\x5\x1E\x10\x2\xE2\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\x3"+
		"\x2\x2\x2\xE4\xE6\a\x30\x2\x2\xE5\xE7\x5L\'\x2\xE6\xE5\x3\x2\x2\x2\xE6"+
		"\xE7\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\a\xE\x2\x2\xE9\xF1\x3\x2"+
		"\x2\x2\xEA\xF1\a\x42\x2\x2\xEB\xEC\a=\x2\x2\xEC\xED\a \x2\x2\xED\xEE\x5"+
		"\x1E\x10\x2\xEE\xEF\a\xE\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xCD\x3\x2\x2\x2"+
		"\xF0\xCE\x3\x2\x2\x2\xF0\xD3\x3\x2\x2\x2\xF0\xD8\x3\x2\x2\x2\xF0\xD9\x3"+
		"\x2\x2\x2\xF0\xDE\x3\x2\x2\x2\xF0\xEA\x3\x2\x2\x2\xF0\xEB\x3\x2\x2\x2"+
		"\xF1\x13\x3\x2\x2\x2\xF2\xF3\a\x42\x2\x2\xF3\xF4\x5\x4\x3\x2\xF4\xF5\a"+
		"=\x2\x2\xF5\xF6\a \x2\x2\xF6\xF7\x5L\'\x2\xF7\xF8\a\xE\x2\x2\xF8\x15\x3"+
		"\x2\x2\x2\xF9\xFF\x5\x86\x44\x2\xFA\xFC\x5L\'\x2\xFB\xFA\x3\x2\x2\x2\xFB"+
		"\xFC\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\a\x30\x2\x2\xFE\xF9\x3\x2"+
		"\x2\x2\xFE\xFB\x3\x2\x2\x2\xFF\x17\x3\x2\x2\x2\x100\x101\a>\x2\x2\x101"+
		"\x10E\a\x30\x2\x2\x102\x103\a@\x2\x2\x103\x10E\a\x30\x2\x2\x104\x105\a"+
		"\x43\x2\x2\x105\x106\x5\xA6T\x2\x106\x107\a\x30\x2\x2\x107\x10E\x3\x2"+
		"\x2\x2\x108\x10A\a\x44\x2\x2\x109\x10B\x5L\'\x2\x10A\x109\x3\x2\x2\x2"+
		"\x10A\x10B\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\a\x30\x2\x2\x10D"+
		"\x100\x3\x2\x2\x2\x10D\x102\x3\x2\x2\x2\x10D\x104\x3\x2\x2\x2\x10D\x108"+
		"\x3\x2\x2\x2\x10E\x19\x3\x2\x2\x2\x10F\x111\a?\x2\x2\x110\x10F\x3\x2\x2"+
		"\x2\x110\x111\x3\x2\x2\x2\x111\x114\x3\x2\x2\x2\x112\x115\x5\xA6T\x2\x113"+
		"\x115\x5\xA8U\x2\x114\x112\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115\x116"+
		"\x3\x2\x2\x2\x116\x117\a\x1F\x2\x2\x117\x1B\x3\x2\x2\x2\x118\x11A\x5L"+
		"\'\x2\x119\x118\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2"+
		"\x11B\x11C\a\x30\x2\x2\x11C\x1D\x3\x2\x2\x2\x11D\x124\x5L\'\x2\x11E\x11F"+
		"\x5\x98M\x2\x11F\x120\x5\x82\x42\x2\x120\x121\a\x12\x2\x2\x121\x122\x5"+
		"N(\x2\x122\x124\x3\x2\x2\x2\x123\x11D\x3\x2\x2\x2\x123\x11E\x3\x2\x2\x2"+
		"\x124\x1F\x3\x2\x2\x2\x125\x126\t\x2\x2\x2\x126!\x3\x2\x2\x2\x127\x128"+
		"\t\x3\x2\x2\x128#\x3\x2\x2\x2\x129\x12A\t\x4\x2\x2\x12A%\x3\x2\x2\x2\x12B"+
		"\x12C\t\x5\x2\x2\x12C\'\x3\x2\x2\x2\x12D\x12E\t\x6\x2\x2\x12E)\x3\x2\x2"+
		"\x2\x12F\x130\t\a\x2\x2\x130+\x3\x2\x2\x2\x131\x134\t\b\x2\x2\x132\x133"+
		"\a\x4\x2\x2\x133\x135\a\x19\x2\x2\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2"+
		"\x2\x2\x135\x15F\x3\x2\x2\x2\x136\x15F\a.\x2\x2\x137\x15F\a\x1E\x2\x2"+
		"\x138\x15F\a\x5\x2\x2\x139\x15F\a\x37\x2\x2\x13A\x15F\a\v\x2\x2\x13B\x15F"+
		"\a+\x2\x2\x13C\x15F\a\x3\x2\x2\x13D\x15F\a\x15\x2\x2\x13E\x15F\a\x38\x2"+
		"\x2\x13F\x15F\a\x16\x2\x2\x140\x15F\a\x12\x2\x2\x141\x15F\a\x6\x2\x2\x142"+
		"\x15F\a\x33\x2\x2\x143\x15F\a%\x2\x2\x144\x15F\a\x1A\x2\x2\x145\x15F\a"+
		"\r\x2\x2\x146\x15F\a\x35\x2\x2\x147\x15F\a\x34\x2\x2\x148\x15F\a&\x2\x2"+
		"\x149\x15F\a!\x2\x2\x14A\x15F\a\x13\x2\x2\x14B\x15F\a*\x2\x2\x14C\x15F"+
		"\a\n\x2\x2\x14D\x15F\a$\x2\x2\x14E\x15F\a\x18\x2\x2\x14F\x15F\a\x36\x2"+
		"\x2\x150\x15F\a\b\x2\x2\x151\x15F\a\t\x2\x2\x152\x15F\a\x39\x2\x2\x153"+
		"\x15F\a\x31\x2\x2\x154\x15F\a\x32\x2\x2\x155\x15F\a)\x2\x2\x156\x15F\a"+
		"\a\x2\x2\x157\x15F\a\x1D\x2\x2\x158\x15F\a\x1B\x2\x2\x159\x15F\a\f\x2"+
		"\x2\x15A\x15B\a \x2\x2\x15B\x15F\a\xE\x2\x2\x15C\x15D\a\x4\x2\x2\x15D"+
		"\x15F\a\x19\x2\x2\x15E\x131\x3\x2\x2\x2\x15E\x136\x3\x2\x2\x2\x15E\x137"+
		"\x3\x2\x2\x2\x15E\x138\x3\x2\x2\x2\x15E\x139\x3\x2\x2\x2\x15E\x13A\x3"+
		"\x2\x2\x2\x15E\x13B\x3\x2\x2\x2\x15E\x13C\x3\x2\x2\x2\x15E\x13D\x3\x2"+
		"\x2\x2\x15E\x13E\x3\x2\x2\x2\x15E\x13F\x3\x2\x2\x2\x15E\x140\x3\x2\x2"+
		"\x2\x15E\x141\x3\x2\x2\x2\x15E\x142\x3\x2\x2\x2\x15E\x143\x3\x2\x2\x2"+
		"\x15E\x144\x3\x2\x2\x2\x15E\x145\x3\x2\x2\x2\x15E\x146\x3\x2\x2\x2\x15E"+
		"\x147\x3\x2\x2\x2\x15E\x148\x3\x2\x2\x2\x15E\x149\x3\x2\x2\x2\x15E\x14A"+
		"\x3\x2\x2\x2\x15E\x14B\x3\x2\x2\x2\x15E\x14C\x3\x2\x2\x2\x15E\x14D\x3"+
		"\x2\x2\x2\x15E\x14E\x3\x2\x2\x2\x15E\x14F\x3\x2\x2\x2\x15E\x150\x3\x2"+
		"\x2\x2\x15E\x151\x3\x2\x2\x2\x15E\x152\x3\x2\x2\x2\x15E\x153\x3\x2\x2"+
		"\x2\x15E\x154\x3\x2\x2\x2\x15E\x155\x3\x2\x2\x2\x15E\x156\x3\x2\x2\x2"+
		"\x15E\x157\x3\x2\x2\x2\x15E\x158\x3\x2\x2\x2\x15E\x159\x3\x2\x2\x2\x15E"+
		"\x15A\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15F-\x3\x2\x2\x2\x160\x161\t"+
		"\t\x2\x2\x161/\x3\x2\x2\x2\x162\x163\t\n\x2\x2\x163\x31\x3\x2\x2\x2\x164"+
		"\x165\aT\x2\x2\x165\x166\a\x6\x2\x2\x166\x167\x5\x34\x1B\x2\x167\x168"+
		"\a\x33\x2\x2\x168\x33\x3\x2\x2\x2\x169\x16A\a\x6\x2\x2\x16A\x16B\x5\x34"+
		"\x1B\x2\x16B\x16C\a\x33\x2\x2\x16C\x173\x3\x2\x2\x2\x16D\x16E\a \x2\x2"+
		"\x16E\x16F\x5\x34\x1B\x2\x16F\x170\a\xE\x2\x2\x170\x173\x3\x2\x2\x2\x171"+
		"\x173\x5<\x1F\x2\x172\x169\x3\x2\x2\x2\x172\x16D\x3\x2\x2\x2\x172\x171"+
		"\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3"+
		"\x2\x2\x2\x175\x35\x3\x2\x2\x2\x176\x177\n\v\x2\x2\x177\x37\x3\x2\x2\x2"+
		"\x178\x179\n\f\x2\x2\x179\x39\x3\x2\x2\x2\x17A\x17B\n\r\x2\x2\x17B;\x3"+
		"\x2\x2\x2\x17C\x17D\n\xE\x2\x2\x17D=\x3\x2\x2\x2\x17E\x17F\n\xF\x2\x2"+
		"\x17F?\x3\x2\x2\x2\x180\x181\n\x10\x2\x2\x181\x41\x3\x2\x2\x2\x182\x183"+
		"\n\x11\x2\x2\x183\x43\x3\x2\x2\x2\x184\x185\n\x12\x2\x2\x185\x45\x3\x2"+
		"\x2\x2\x186\x187\n\x13\x2\x2\x187G\x3\x2\x2\x2\x188\x189\n\f\x2\x2\x189"+
		"I\x3\x2\x2\x2\x18A\x18B\v\x2\x2\x2\x18BK\x3\x2\x2\x2\x18C\x18F\x5N(\x2"+
		"\x18D\x18E\a\x1D\x2\x2\x18E\x190\x5L\'\x2\x18F\x18D\x3\x2\x2\x2\x18F\x190"+
		"\x3\x2\x2\x2\x190M\x3\x2\x2\x2\x191\x195\x5P)\x2\x192\x193\x5.\x18\x2"+
		"\x193\x194\x5N(\x2\x194\x196\x3\x2\x2\x2\x195\x192\x3\x2\x2\x2\x195\x196"+
		"\x3\x2\x2\x2\x196O\x3\x2\x2\x2\x197\x19F\x5R*\x2\x198\x199\x5R*\x2\x199"+
		"\x19A\a#\x2\x2\x19A\x19B\x5L\'\x2\x19B\x19C\a\x1F\x2\x2\x19C\x19D\x5P"+
		")\x2\x19D\x19F\x3\x2\x2\x2\x19E\x197\x3\x2\x2\x2\x19E\x198\x3\x2\x2\x2"+
		"\x19FQ\x3\x2\x2\x2\x1A0\x1A3\x5T+\x2\x1A1\x1A2\a\x32\x2\x2\x1A2\x1A4\x5"+
		"R*\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4S\x3\x2\x2\x2\x1A5"+
		"\x1A8\x5V,\x2\x1A6\x1A7\a\x31\x2\x2\x1A7\x1A9\x5T+\x2\x1A8\x1A6\x3\x2"+
		"\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9U\x3\x2\x2\x2\x1AA\x1AD\x5X-\x2\x1AB"+
		"\x1AC\a\x15\x2\x2\x1AC\x1AE\x5V,\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AE\x3"+
		"\x2\x2\x2\x1AEW\x3\x2\x2\x2\x1AF\x1B2\x5Z.\x2\x1B0\x1B1\a+\x2\x2\x1B1"+
		"\x1B3\x5X-\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3Y\x3\x2"+
		"\x2\x2\x1B4\x1B7\x5\\/\x2\x1B5\x1B6\a\x3\x2\x2\x1B6\x1B8\x5Z.\x2\x1B7"+
		"\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8[\x3\x2\x2\x2\x1B9\x1BD\x5"+
		"^\x30\x2\x1BA\x1BB\x5\x30\x19\x2\x1BB\x1BC\x5\\/\x2\x1BC\x1BE\x3\x2\x2"+
		"\x2\x1BD\x1BA\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE]\x3\x2\x2\x2\x1BF"+
		"\x1C3\x5`\x31\x2\x1C0\x1C1\x5\"\x12\x2\x1C1\x1C2\x5^\x30\x2\x1C2\x1C4"+
		"\x3\x2\x2\x2\x1C3\x1C0\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4_\x3\x2\x2"+
		"\x2\x1C5\x1C8\x5\x62\x32\x2\x1C6\x1C7\t\x14\x2\x2\x1C7\x1C9\x5`\x31\x2"+
		"\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x61\x3\x2\x2\x2\x1CA"+
		"\x1CD\x5\x64\x33\x2\x1CB\x1CC\t\x15\x2\x2\x1CC\x1CE\x5\x62\x32\x2\x1CD"+
		"\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x63\x3\x2\x2\x2\x1CF\x1D2"+
		"\x5\x66\x34\x2\x1D0\x1D1\t\x16\x2\x2\x1D1\x1D3\x5\x64\x33\x2\x1D2\x1D0"+
		"\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x65\x3\x2\x2\x2\x1D4\x1D5\a \x2"+
		"\x2\x1D5\x1D6\x5h\x35\x2\x1D6\x1D7\a\xE\x2\x2\x1D7\x1D8\x5\x66\x34\x2"+
		"\x1D8\x1DB\x3\x2\x2\x2\x1D9\x1DB\x5j\x36\x2\x1DA\x1D4\x3\x2\x2\x2\x1DA"+
		"\x1D9\x3\x2\x2\x2\x1DBg\x3\x2\x2\x2\x1DC\x1E0\x5\x98M\x2\x1DD\x1DF\x5"+
		"(\x15\x2\x1DE\x1DD\x3\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2"+
		"\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1i\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E3"+
		"\x1E4\x5v<\x2\x1E4\x1E5\x5\x66\x34\x2\x1E5\x1EA\x3\x2\x2\x2\x1E6\x1EA"+
		"\x5l\x37\x2\x1E7\x1EA\x5n\x38\x2\x1E8\x1EA\x5x=\x2\x1E9\x1E3\x3\x2\x2"+
		"\x2\x1E9\x1E6\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1E9\x1E8\x3\x2\x2\x2"+
		"\x1EAk\x3\x2\x2\x2\x1EB\x1EC\x5 \x11\x2\x1EC\x1ED\x5\x66\x34\x2\x1EDm"+
		"\x3\x2\x2\x2\x1EE\x1EF\x5p\x39\x2\x1EF\x1F0\a \x2\x2\x1F0\x1F1\x5r:\x2"+
		"\x1F1\x1F2\a\xE\x2\x2\x1F2\x1F7\x3\x2\x2\x2\x1F3\x1F4\x5p\x39\x2\x1F4"+
		"\x1F5\x5t;\x2\x1F5\x1F7\x3\x2\x2\x2\x1F6\x1EE\x3\x2\x2\x2\x1F6\x1F3\x3"+
		"\x2\x2\x2\x1F7o\x3\x2\x2\x2\x1F8\x1F9\a\x17\x2\x2\x1F9q\x3\x2\x2\x2\x1FA"+
		"\x1FE\x5\x98M\x2\x1FB\x1FD\x5(\x15\x2\x1FC\x1FB\x3\x2\x2\x2\x1FD\x200"+
		"\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FFs\x3\x2\x2"+
		"\x2\x200\x1FE\x3\x2\x2\x2\x201\x202\x5j\x36\x2\x202u\x3\x2\x2\x2\x203"+
		"\x204\t\x17\x2\x2\x204w\x3\x2\x2\x2\x205\x206\b=\x1\x2\x206\x207\x5~@"+
		"\x2\x207\x222\x3\x2\x2\x2\x208\x209\f\b\x2\x2\x209\x20A\a\x4\x2\x2\x20A"+
		"\x20B\x5L\'\x2\x20B\x20C\a\x19\x2\x2\x20C\x221\x3\x2\x2\x2\x20D\x20E\f"+
		"\a\x2\x2\x20E\x20F\a \x2\x2\x20F\x210\x5z>\x2\x210\x211\a\xE\x2\x2\x211"+
		"\x221\x3\x2\x2\x2\x212\x213\f\x6\x2\x2\x213\x215\a-\x2\x2\x214\x216\a"+
		"T\x2\x2\x215\x214\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x217\x3\x2\x2"+
		"\x2\x217\x221\x5\xA6T\x2\x218\x219\f\x5\x2\x2\x219\x21B\a\f\x2\x2\x21A"+
		"\x21C\aT\x2\x2\x21B\x21A\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x21D\x3"+
		"\x2\x2\x2\x21D\x221\x5\xA6T\x2\x21E\x21F\f\x4\x2\x2\x21F\x221\x5v<\x2"+
		"\x220\x208\x3\x2\x2\x2\x220\x20D\x3\x2\x2\x2\x220\x212\x3\x2\x2\x2\x220"+
		"\x218\x3\x2\x2\x2\x220\x21E\x3\x2\x2\x2\x221\x224\x3\x2\x2\x2\x222\x220"+
		"\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223y\x3\x2\x2\x2\x224\x222\x3\x2\x2"+
		"\x2\x225\x22A\x5|?\x2\x226\x227\a\x1D\x2\x2\x227\x229\x5|?\x2\x228\x226"+
		"\x3\x2\x2\x2\x229\x22C\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3"+
		"\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22D\x225\x3\x2"+
		"\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E{\x3\x2\x2\x2\x22F\x230\x5N(\x2\x230"+
		"}\x3\x2\x2\x2\x231\x238\x5\xA6T\x2\x232\x238\x5$\x13\x2\x233\x234\a \x2"+
		"\x2\x234\x235\x5L\'\x2\x235\x236\a\xE\x2\x2\x236\x238\x3\x2\x2\x2\x237"+
		"\x231\x3\x2\x2\x2\x237\x232\x3\x2\x2\x2\x237\x233\x3\x2\x2\x2\x238\x7F"+
		"\x3\x2\x2\x2\x239\x23A\x5\x82\x42\x2\x23A\x23C\a \x2\x2\x23B\x23D\x5L"+
		"\'\x2\x23C\x23B\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2"+
		"\x23E\x23F\a\xE\x2\x2\x23F\x246\x3\x2\x2\x2\x240\x241\x5\x82\x42\x2\x241"+
		"\x242\a\x12\x2\x2\x242\x243\x5\x8CG\x2\x243\x246\x3\x2\x2\x2\x244\x246"+
		"\x5\x82\x42\x2\x245\x239\x3\x2\x2\x2\x245\x240\x3\x2\x2\x2\x245\x244\x3"+
		"\x2\x2\x2\x246\x81\x3\x2\x2\x2\x247\x249\x5\xAAV\x2\x248\x247\x3\x2\x2"+
		"\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24C\x5\xA6T\x2\x24B"+
		"\x24D\x5\x84\x43\x2\x24C\x24B\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x83"+
		"\x3\x2\x2\x2\x24E\x250\a\x4\x2\x2\x24F\x251\x5P)\x2\x250\x24F\x3\x2\x2"+
		"\x2\x250\x251\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x255\a\x19\x2\x2"+
		"\x253\x255\x5\xA0Q\x2\x254\x24E\x3\x2\x2\x2\x254\x253\x3\x2\x2\x2\x255"+
		"\x85\x3\x2\x2\x2\x256\x258\a\x45\x2\x2\x257\x256\x3\x2\x2\x2\x257\x258"+
		"\x3\x2\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x25B\x5\x32\x1A\x2\x25A\x259\x3"+
		"\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25D\x5\x88"+
		"\x45\x2\x25D\x87\x3\x2\x2\x2\x25E\x260\x5\x90I\x2\x25F\x261\x5\x8A\x46"+
		"\x2\x260\x25F\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x266\x3\x2\x2\x2"+
		"\x262\x263\x5\x98M\x2\x263\x264\x5\x8A\x46\x2\x264\x266\x3\x2\x2\x2\x265"+
		"\x25E\x3\x2\x2\x2\x265\x262\x3\x2\x2\x2\x266\x89\x3\x2\x2\x2\x267\x26C"+
		"\x5\x80\x41\x2\x268\x269\a\x1D\x2\x2\x269\x26B\x5\x80\x41\x2\x26A\x268"+
		"\x3\x2\x2\x2\x26B\x26E\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26C\x26D\x3"+
		"\x2\x2\x2\x26D\x26F\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26F\x270\a\x30"+
		"\x2\x2\x270\x8B\x3\x2\x2\x2\x271\x277\x5N(\x2\x272\x273\aW\x2\x2\x273"+
		"\x274\x5\x8EH\x2\x274\x275\aX\x2\x2\x275\x277\x3\x2\x2\x2\x276\x271\x3"+
		"\x2\x2\x2\x276\x272\x3\x2\x2\x2\x277\x8D\x3\x2\x2\x2\x278\x27D\x5\x8C"+
		"G\x2\x279\x27A\a\x1D\x2\x2\x27A\x27C\x5\x8CG\x2\x27B\x279\x3\x2\x2\x2"+
		"\x27C\x27F\x3\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E"+
		"\x8F\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2\x280\x282\aU\x2\x2\x281\x283\x5"+
		"\x92J\x2\x282\x281\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x285\x3\x2\x2"+
		"\x2\x284\x286\x5\x94K\x2\x285\x284\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286"+
		"\x287\x3\x2\x2\x2\x287\x288\aW\x2\x2\x288\x289\bI\x1\x2\x289\x91\x3\x2"+
		"\x2\x2\x28A\x28B\x5\xA6T\x2\x28B\x93\x3\x2\x2\x2\x28C\x28D\a\x1F\x2\x2"+
		"\x28D\x292\x5\x96L\x2\x28E\x28F\a\x1D\x2\x2\x28F\x291\x5\x96L\x2\x290"+
		"\x28E\x3\x2\x2\x2\x291\x294\x3\x2\x2\x2\x292\x290\x3\x2\x2\x2\x292\x293"+
		"\x3\x2\x2\x2\x293\x95\x3\x2\x2\x2\x294\x292\x3\x2\x2\x2\x295\x297\aK\x2"+
		"\x2\x296\x295\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x3\x2\x2\x2"+
		"\x298\x29A\x5*\x16\x2\x299\x298\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A"+
		"\x29B\x3\x2\x2\x2\x29B\x29C\x5\xA6T\x2\x29C\x97\x3\x2\x2\x2\x29D\x29F"+
		"\aJ\x2\x2\x29E\x29D\x3\x2\x2\x2\x29F\x2A2\x3\x2\x2\x2\x2A0\x29E\x3\x2"+
		"\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A4\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2"+
		"\x2\x2A3\x2A5\t\x18\x2\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2"+
		"\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2AB\x5\x9AN\x2\x2A7\x2A8\a\x6\x2\x2\x2A8"+
		"\x2A9\x5\x34\x1B\x2\x2A9\x2AA\a\x33\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB\x2A7"+
		"\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2B7\x3\x2\x2\x2\x2AD\x2AE\a\x11"+
		"\x2\x2\x2AE\x2B3\x5\x9AN\x2\x2AF\x2B0\a\x6\x2\x2\x2B0\x2B1\x5\x34\x1B"+
		"\x2\x2B1\x2B2\a\x33\x2\x2\x2B2\x2B4\x3\x2\x2\x2\x2B3\x2AF\x3\x2\x2\x2"+
		"\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B6\x3\x2\x2\x2\x2B5\x2AD\x3\x2\x2\x2\x2B6"+
		"\x2B9\x3\x2\x2\x2\x2B7\x2B5\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2BD"+
		"\x3\x2\x2\x2\x2B9\x2B7\x3\x2\x2\x2\x2BA\x2BD\aG\x2\x2\x2BB\x2BD\aH\x2"+
		"\x2\x2BC\x2A0\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BC\x2BB\x3\x2\x2\x2"+
		"\x2BD\x99\x3\x2\x2\x2\x2BE\x2C0\t\x19\x2\x2\x2BF\x2BE\x3\x2\x2\x2\x2C0"+
		"\x2C1\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x9B"+
		"\x3\x2\x2\x2\x2C3\x2C5\t\x1A\x2\x2\x2C4\x2C3\x3\x2\x2\x2\x2C4\x2C5\x3"+
		"\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C7\x5\x98M\x2\x2C7\x9D\x3\x2\x2"+
		"\x2\x2C8\x2C9\x5\xA6T\x2\x2C9\x9F\x3\x2\x2\x2\x2CA\x2CB\a \x2\x2\x2CB"+
		"\x2CC\a\x46\x2\x2\x2CC\x2DA\a\xE\x2\x2\x2CD\x2D6\a \x2\x2\x2CE\x2D3\x5"+
		"\xA2R\x2\x2CF\x2D0\a\x1D\x2\x2\x2D0\x2D2\x5\xA2R\x2\x2D1\x2CF\x3\x2\x2"+
		"\x2\x2D2\x2D5\x3\x2\x2\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2"+
		"\x2D4\x2D7\x3\x2\x2\x2\x2D5\x2D3\x3\x2\x2\x2\x2D6\x2CE\x3\x2\x2\x2\x2D6"+
		"\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2DA\a\xE\x2\x2\x2D9\x2CA"+
		"\x3\x2\x2\x2\x2D9\x2CD\x3\x2\x2\x2\x2DA\xA1\x3\x2\x2\x2\x2DB\x2DC\x5\x9C"+
		"O\x2\x2DC\x2DD\x5\xA4S\x2\x2DD\xA3\x3\x2\x2\x2\x2DE\x2E0\x5\xAAV\x2\x2DF"+
		"\x2DE\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E8\x3\x2\x2\x2\x2E1\x2E2"+
		"\a \x2\x2\x2E2\x2E3\x5\xA4S\x2\x2E3\x2E4\a\xE\x2\x2\x2E4\x2E9\x3\x2\x2"+
		"\x2\x2E5\x2E7\x5\x9EP\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7"+
		"\x2E9\x3\x2\x2\x2\x2E8\x2E1\x3\x2\x2\x2\x2E8\x2E6\x3\x2\x2\x2\x2E9\x2EB"+
		"\x3\x2\x2\x2\x2EA\x2EC\x5\x84\x43\x2\x2EB\x2EA\x3\x2\x2\x2\x2EB\x2EC\x3"+
		"\x2\x2\x2\x2EC\xA5\x3\x2\x2\x2\x2ED\x2F2\aV\x2\x2\x2EE\x2EF\a\x11\x2\x2"+
		"\x2EF\x2F1\aV\x2\x2\x2F0\x2EE\x3\x2\x2\x2\x2F1\x2F4\x3\x2\x2\x2\x2F2\x2F0"+
		"\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F7\x3\x2\x2\x2\x2F4\x2F2\x3"+
		"\x2\x2\x2\x2F5\x2F7\x5*\x16\x2\x2F6\x2ED\x3\x2\x2\x2\x2F6\x2F5\x3\x2\x2"+
		"\x2\x2F7\xA7\x3\x2\x2\x2\x2F8\x2F9\t\x1B\x2\x2\x2F9\xA9\x3\x2\x2\x2\x2FA"+
		"\x2FC\x5(\x15\x2\x2FB\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FB"+
		"\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\xAB\x3\x2\x2\x2Q\xB2\xB4\xBF\xE2"+
		"\xE6\xF0\xFB\xFE\x10A\x10D\x110\x114\x119\x123\x134\x15E\x172\x174\x18F"+
		"\x195\x19E\x1A3\x1A8\x1AD\x1B2\x1B7\x1BD\x1C3\x1C8\x1CD\x1D2\x1DA\x1E0"+
		"\x1E9\x1F6\x1FE\x215\x21B\x220\x222\x22A\x22D\x237\x23C\x245\x248\x24C"+
		"\x250\x254\x257\x25A\x260\x265\x26C\x276\x27D\x282\x285\x292\x296\x299"+
		"\x2A0\x2A4\x2AB\x2B3\x2B7\x2BC\x2C1\x2C4\x2D3\x2D6\x2D9\x2DF\x2E6\x2E8"+
		"\x2EB\x2F2\x2F6\x2FD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace myAntlr
