//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-dazou\Documents\Visual Studio 2012\Projects\myAntlr\myAntlr\Module.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace myAntlr {



using System;

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ModuleParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IModuleVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclarator([NotNull] ModuleParser.DeclaratorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.template_decl_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTemplate_decl_start([NotNull] ModuleParser.Template_decl_startContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_decl_specifiers([NotNull] ModuleParser.Function_decl_specifiersContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.type_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_suffix([NotNull] ModuleParser.Type_suffixContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_argument_list([NotNull] ModuleParser.Function_argument_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.cndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCndExpr([NotNull] ModuleParser.CndExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicative_expression([NotNull] ModuleParser.Multiplicative_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompound_statement([NotNull] ModuleParser.Compound_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_squares_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_squares_or_semicolon([NotNull] ModuleParser.No_squares_or_semicolonContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assign_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_expr([NotNull] ModuleParser.Assign_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCast_expression([NotNull] ModuleParser.Cast_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_angle_brackets_or_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_angle_brackets_or_brackets([NotNull] ModuleParser.No_angle_brackets_or_bracketsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality_expression([NotNull] ModuleParser.Equality_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.parameter_decl_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter_decl_clause([NotNull] ModuleParser.Parameter_decl_clauseContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_comma_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_comma_or_semicolon([NotNull] ModuleParser.No_comma_or_semicolonContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.memberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccess([NotNull] ModuleParser.MemberAccessContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.base_class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBase_class([NotNull] ModuleParser.Base_classContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_name([NotNull] ModuleParser.Function_nameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.parameter_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter_name([NotNull] ModuleParser.Parameter_nameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ctor_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtor_list([NotNull] ModuleParser.Ctor_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.access_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAccess_specifier([NotNull] ModuleParser.Access_specifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ctor_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtor_expr([NotNull] ModuleParser.Ctor_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.init_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInit_declarator_list([NotNull] ModuleParser.Init_declarator_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assign_water_l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_water_l2([NotNull] ModuleParser.Assign_water_l2Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.init_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInit_declarator([NotNull] ModuleParser.Init_declaratorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayIndexing([NotNull] ModuleParser.ArrayIndexingContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.parameter_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter_decl([NotNull] ModuleParser.Parameter_declContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] ModuleParser.NumberContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBase_type([NotNull] ModuleParser.Base_typeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.return_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturn_type([NotNull] ModuleParser.Return_typeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCode([NotNull] ModuleParser.CodeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ctor_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtor_initializer([NotNull] ModuleParser.Ctor_initializerContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExclusive_or_expression([NotNull] ModuleParser.Exclusive_or_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assign_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_expr_w_([NotNull] ModuleParser.Assign_expr_w_Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.param_type_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam_type_id([NotNull] ModuleParser.Param_type_idContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ptrMemberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPtrMemberAccess([NotNull] ModuleParser.PtrMemberAccessContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitializer_list([NotNull] ModuleParser.Initializer_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditive_expression([NotNull] ModuleParser.Additive_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_squares([NotNull] ModuleParser.No_squaresContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary_operator([NotNull] ModuleParser.Unary_operatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.declByClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclByClass([NotNull] ModuleParser.DeclByClassContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitShift_expression([NotNull] ModuleParser.Shift_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.normOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNormOr([NotNull] ModuleParser.NormOrContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.@sizeof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSizeof([NotNull] ModuleParser.SizeofContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_name([NotNull] ModuleParser.Type_nameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_brackets_curlies_or_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_brackets_curlies_or_squares([NotNull] ModuleParser.No_brackets_curlies_or_squaresContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.sizeof_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSizeof_expression([NotNull] ModuleParser.Sizeof_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] ModuleParser.IdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.unary_op_and_cast_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary_op_and_cast_expr([NotNull] ModuleParser.Unary_op_and_cast_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCall([NotNull] ModuleParser.FuncCallContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.primaryOnly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryOnly([NotNull] ModuleParser.PrimaryOnlyContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.sizeof_operand2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSizeof_operand2([NotNull] ModuleParser.Sizeof_operand2Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInclusive_or_expression([NotNull] ModuleParser.Inclusive_or_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_param_list([NotNull] ModuleParser.Function_param_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_brackets_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_brackets_or_semicolon([NotNull] ModuleParser.No_brackets_or_semicolonContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.base_classes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBase_classes([NotNull] ModuleParser.Base_classesContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.incDecOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncDecOp([NotNull] ModuleParser.IncDecOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_curlies"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_curlies([NotNull] ModuleParser.No_curliesContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.equality_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality_operator([NotNull] ModuleParser.Equality_operatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.param_type_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam_type_list([NotNull] ModuleParser.Param_type_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] ModuleParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.class_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClass_name([NotNull] ModuleParser.Class_nameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelational_expression([NotNull] ModuleParser.Relational_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.simple_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimple_decl([NotNull] ModuleParser.Simple_declContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.param_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam_decl_specifiers([NotNull] ModuleParser.Param_decl_specifiersContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment_operator([NotNull] ModuleParser.Assignment_operatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.param_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam_type([NotNull] ModuleParser.Param_typeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.type_id_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_id_list([NotNull] ModuleParser.Type_id_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_argument([NotNull] ModuleParser.Function_argumentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary_expression([NotNull] ModuleParser.Unary_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ptrs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPtrs([NotNull] ModuleParser.PtrsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.constant_expr_w_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant_expr_w_([NotNull] ModuleParser.Constant_expr_w_Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWater([NotNull] ModuleParser.WaterContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr_expression([NotNull] ModuleParser.Or_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] ModuleParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assign_expr_w__l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_expr_w__l2([NotNull] ModuleParser.Assign_expr_w__l2Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.function_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_def([NotNull] ModuleParser.Function_defContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsing_directive([NotNull] ModuleParser.Using_directiveContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.relational_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelational_operator([NotNull] ModuleParser.Relational_operatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.ptr_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPtr_operator([NotNull] ModuleParser.Ptr_operatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.@operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperator([NotNull] ModuleParser.OperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.class_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClass_def([NotNull] ModuleParser.Class_defContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.initializer_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitializer_id([NotNull] ModuleParser.Initializer_idContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.inc_dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInc_dec([NotNull] ModuleParser.Inc_decContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd_expression([NotNull] ModuleParser.And_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimary_expression([NotNull] ModuleParser.Primary_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.exception_specification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitException_specification([NotNull] ModuleParser.Exception_specificationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.template_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTemplate_param_list([NotNull] ModuleParser.Template_param_listContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.declByType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclByType([NotNull] ModuleParser.DeclByTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.parameter_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter_id([NotNull] ModuleParser.Parameter_idContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.sizeof_operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSizeof_operand([NotNull] ModuleParser.Sizeof_operandContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.no_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNo_brackets([NotNull] ModuleParser.No_bracketsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.bit_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBit_and_expression([NotNull] ModuleParser.Bit_and_expressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitializer([NotNull] ModuleParser.InitializerContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.assign_water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_water([NotNull] ModuleParser.Assign_waterContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ModuleParser.cast_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCast_target([NotNull] ModuleParser.Cast_targetContext context);
}
} // namespace myAntlr
