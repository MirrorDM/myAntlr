//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-dazou\documents\visual studio 2012\Projects\MyAntlr\myAntlr\Function.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace myAntlr {



using System;

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="FunctionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IFunctionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.pre_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPre_else([NotNull] FunctionParser.Pre_elseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.pre_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPre_else([NotNull] FunctionParser.Pre_elseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarator([NotNull] FunctionParser.DeclaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarator([NotNull] FunctionParser.DeclaratorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.template_decl_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplate_decl_start([NotNull] FunctionParser.Template_decl_startContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.template_decl_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplate_decl_start([NotNull] FunctionParser.Template_decl_startContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.function_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_argument_list([NotNull] FunctionParser.Function_argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.function_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_argument_list([NotNull] FunctionParser.Function_argument_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.type_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_suffix([NotNull] FunctionParser.Type_suffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.type_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_suffix([NotNull] FunctionParser.Type_suffixContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.cndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCndExpr([NotNull] FunctionParser.CndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.cndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCndExpr([NotNull] FunctionParser.CndExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_squares_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_squares_or_semicolon([NotNull] FunctionParser.No_squares_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_squares_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_squares_or_semicolon([NotNull] FunctionParser.No_squares_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.For_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_statement([NotNull] FunctionParser.For_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.For_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_statement([NotNull] FunctionParser.For_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast_expression([NotNull] FunctionParser.Cast_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast_expression([NotNull] FunctionParser.Cast_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_angle_brackets_or_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_angle_brackets_or_brackets([NotNull] FunctionParser.No_angle_brackets_or_bracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_angle_brackets_or_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_angle_brackets_or_brackets([NotNull] FunctionParser.No_angle_brackets_or_bracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality_expression([NotNull] FunctionParser.Equality_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality_expression([NotNull] FunctionParser.Equality_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_comma_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_comma_or_semicolon([NotNull] FunctionParser.No_comma_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_comma_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_comma_or_semicolon([NotNull] FunctionParser.No_comma_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.Try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] FunctionParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.Try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] FunctionParser.Try_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] FunctionParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] FunctionParser.NumberContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_type([NotNull] FunctionParser.Base_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_type([NotNull] FunctionParser.Base_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.ptrMemberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrMemberAccess([NotNull] FunctionParser.PtrMemberAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.ptrMemberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrMemberAccess([NotNull] FunctionParser.PtrMemberAccessContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.pre_opener"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPre_opener([NotNull] FunctionParser.Pre_openerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.pre_opener"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPre_opener([NotNull] FunctionParser.Pre_openerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_squares([NotNull] FunctionParser.No_squaresContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_squares([NotNull] FunctionParser.No_squaresContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_expression([NotNull] FunctionParser.Shift_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_expression([NotNull] FunctionParser.Shift_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.declByClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclByClass([NotNull] FunctionParser.DeclByClassContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.declByClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclByClass([NotNull] FunctionParser.DeclByClassContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_name([NotNull] FunctionParser.Type_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_name([NotNull] FunctionParser.Type_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] FunctionParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] FunctionParser.BreakStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.sizeof_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_expression([NotNull] FunctionParser.Sizeof_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.sizeof_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_expression([NotNull] FunctionParser.Sizeof_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.unary_op_and_cast_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_op_and_cast_expr([NotNull] FunctionParser.Unary_op_and_cast_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.unary_op_and_cast_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_op_and_cast_expr([NotNull] FunctionParser.Unary_op_and_cast_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] FunctionParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] FunctionParser.FuncCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInclusive_or_expression([NotNull] FunctionParser.Inclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInclusive_or_expression([NotNull] FunctionParser.Inclusive_or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.base_classes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_classes([NotNull] FunctionParser.Base_classesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.base_classes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_classes([NotNull] FunctionParser.Base_classesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.incDecOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncDecOp([NotNull] FunctionParser.IncDecOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.incDecOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncDecOp([NotNull] FunctionParser.IncDecOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.pre_closer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPre_closer([NotNull] FunctionParser.Pre_closerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.pre_closer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPre_closer([NotNull] FunctionParser.Pre_closerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_expression([NotNull] FunctionParser.Relational_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_expression([NotNull] FunctionParser.Relational_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.class_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_name([NotNull] FunctionParser.Class_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.class_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_name([NotNull] FunctionParser.Class_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.param_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_decl_specifiers([NotNull] FunctionParser.Param_decl_specifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.param_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_decl_specifiers([NotNull] FunctionParser.Param_decl_specifiersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.param_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type([NotNull] FunctionParser.Param_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.param_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type([NotNull] FunctionParser.Param_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.function_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_argument([NotNull] FunctionParser.Function_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.function_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_argument([NotNull] FunctionParser.Function_argumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.If_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] FunctionParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.If_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] FunctionParser.If_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWater([NotNull] FunctionParser.WaterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWater([NotNull] FunctionParser.WaterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.closing_curly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosing_curly([NotNull] FunctionParser.Closing_curlyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.closing_curly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosing_curly([NotNull] FunctionParser.Closing_curlyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.for_init_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_init_statement([NotNull] FunctionParser.For_init_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.for_init_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_init_statement([NotNull] FunctionParser.For_init_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr_expression([NotNull] FunctionParser.Or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr_expression([NotNull] FunctionParser.Or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.relational_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_operator([NotNull] FunctionParser.Relational_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.relational_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_operator([NotNull] FunctionParser.Relational_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.do_statement1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_statement1([NotNull] FunctionParser.Do_statement1Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.do_statement1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_statement1([NotNull] FunctionParser.Do_statement1Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.@operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator([NotNull] FunctionParser.OperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.@operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator([NotNull] FunctionParser.OperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.inc_dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInc_dec([NotNull] FunctionParser.Inc_decContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.inc_dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInc_dec([NotNull] FunctionParser.Inc_decContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.initDeclSimple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitDeclSimple([NotNull] FunctionParser.InitDeclSimpleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.initDeclSimple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitDeclSimple([NotNull] FunctionParser.InitDeclSimpleContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.opening_curly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpening_curly([NotNull] FunctionParser.Opening_curlyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.opening_curly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpening_curly([NotNull] FunctionParser.Opening_curlyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary_expression([NotNull] FunctionParser.Primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary_expression([NotNull] FunctionParser.Primary_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGotoStatement([NotNull] FunctionParser.GotoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGotoStatement([NotNull] FunctionParser.GotoStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets([NotNull] FunctionParser.No_bracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_brackets"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets([NotNull] FunctionParser.No_bracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.bit_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBit_and_expression([NotNull] FunctionParser.Bit_and_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.bit_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBit_and_expression([NotNull] FunctionParser.Bit_and_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.assign_water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_water([NotNull] FunctionParser.Assign_waterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.assign_water"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_water([NotNull] FunctionParser.Assign_waterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.cast_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast_target([NotNull] FunctionParser.Cast_targetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.cast_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast_target([NotNull] FunctionParser.Cast_targetContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer([NotNull] FunctionParser.InitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer([NotNull] FunctionParser.InitializerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.function_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_decl_specifiers([NotNull] FunctionParser.Function_decl_specifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.function_decl_specifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_decl_specifiers([NotNull] FunctionParser.Function_decl_specifiersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] FunctionParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] FunctionParser.ReturnStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicative_expression([NotNull] FunctionParser.Multiplicative_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicative_expression([NotNull] FunctionParser.Multiplicative_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.assign_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_expr([NotNull] FunctionParser.Assign_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.assign_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_expr([NotNull] FunctionParser.Assign_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.expr_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_statement([NotNull] FunctionParser.Expr_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.expr_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_statement([NotNull] FunctionParser.Expr_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.memberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccess([NotNull] FunctionParser.MemberAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.memberAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccess([NotNull] FunctionParser.MemberAccessContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.base_class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_class([NotNull] FunctionParser.Base_classContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.base_class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_class([NotNull] FunctionParser.Base_classContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.parameter_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_name([NotNull] FunctionParser.Parameter_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.parameter_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_name([NotNull] FunctionParser.Parameter_nameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.access_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccess_specifier([NotNull] FunctionParser.Access_specifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.access_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccess_specifier([NotNull] FunctionParser.Access_specifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.assign_water_l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_water_l2([NotNull] FunctionParser.Assign_water_l2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.assign_water_l2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_water_l2([NotNull] FunctionParser.Assign_water_l2Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.init_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInit_declarator_list([NotNull] FunctionParser.Init_declarator_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.init_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInit_declarator_list([NotNull] FunctionParser.Init_declarator_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] FunctionParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] FunctionParser.ConditionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayIndexing([NotNull] FunctionParser.ArrayIndexingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayIndexing([NotNull] FunctionParser.ArrayIndexingContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.Catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatch_statement([NotNull] FunctionParser.Catch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.Catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatch_statement([NotNull] FunctionParser.Catch_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabel([NotNull] FunctionParser.LabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabel([NotNull] FunctionParser.LabelContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExclusive_or_expression([NotNull] FunctionParser.Exclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExclusive_or_expression([NotNull] FunctionParser.Exclusive_or_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] FunctionParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] FunctionParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.param_type_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type_id([NotNull] FunctionParser.Param_type_idContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.param_type_id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type_id([NotNull] FunctionParser.Param_type_idContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.initDeclWithCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitDeclWithCall([NotNull] FunctionParser.InitDeclWithCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.initDeclWithCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitDeclWithCall([NotNull] FunctionParser.InitDeclWithCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditive_expression([NotNull] FunctionParser.Additive_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditive_expression([NotNull] FunctionParser.Additive_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer_list([NotNull] FunctionParser.Initializer_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer_list([NotNull] FunctionParser.Initializer_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_operator([NotNull] FunctionParser.Unary_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_operator([NotNull] FunctionParser.Unary_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.normOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNormOr([NotNull] FunctionParser.NormOrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.normOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNormOr([NotNull] FunctionParser.NormOrContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.Else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse_statement([NotNull] FunctionParser.Else_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.Else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse_statement([NotNull] FunctionParser.Else_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.@sizeof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof([NotNull] FunctionParser.SizeofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.@sizeof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof([NotNull] FunctionParser.SizeofContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.Switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] FunctionParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.Switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] FunctionParser.Switch_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.Do_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_statement([NotNull] FunctionParser.Do_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.Do_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_statement([NotNull] FunctionParser.Do_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_brackets_curlies_or_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets_curlies_or_squares([NotNull] FunctionParser.No_brackets_curlies_or_squaresContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_brackets_curlies_or_squares"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets_curlies_or_squares([NotNull] FunctionParser.No_brackets_curlies_or_squaresContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.While_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] FunctionParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.While_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] FunctionParser.While_statementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] FunctionParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] FunctionParser.IdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.primaryOnly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryOnly([NotNull] FunctionParser.PrimaryOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.primaryOnly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryOnly([NotNull] FunctionParser.PrimaryOnlyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.sizeof_operand2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_operand2([NotNull] FunctionParser.Sizeof_operand2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.sizeof_operand2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_operand2([NotNull] FunctionParser.Sizeof_operand2Context context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_brackets_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_brackets_or_semicolon([NotNull] FunctionParser.No_brackets_or_semicolonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_brackets_or_semicolon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_brackets_or_semicolon([NotNull] FunctionParser.No_brackets_or_semicolonContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.no_curlies"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNo_curlies([NotNull] FunctionParser.No_curliesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.no_curlies"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNo_curlies([NotNull] FunctionParser.No_curliesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.equality_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality_operator([NotNull] FunctionParser.Equality_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.equality_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality_operator([NotNull] FunctionParser.Equality_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.param_type_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam_type_list([NotNull] FunctionParser.Param_type_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.param_type_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam_type_list([NotNull] FunctionParser.Param_type_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] FunctionParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] FunctionParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.simple_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple_decl([NotNull] FunctionParser.Simple_declContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.simple_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple_decl([NotNull] FunctionParser.Simple_declContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.block_starter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock_starter([NotNull] FunctionParser.Block_starterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.block_starter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock_starter([NotNull] FunctionParser.Block_starterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment_operator([NotNull] FunctionParser.Assignment_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment_operator([NotNull] FunctionParser.Assignment_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] FunctionParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] FunctionParser.StatementsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_expression([NotNull] FunctionParser.Unary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_expression([NotNull] FunctionParser.Unary_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.ptrs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrs([NotNull] FunctionParser.PtrsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.ptrs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrs([NotNull] FunctionParser.PtrsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.initDeclWithAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitDeclWithAssign([NotNull] FunctionParser.InitDeclWithAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.initDeclWithAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitDeclWithAssign([NotNull] FunctionParser.InitDeclWithAssignContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] FunctionParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] FunctionParser.ConstantContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] FunctionParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] FunctionParser.ContinueStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.ptr_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtr_operator([NotNull] FunctionParser.Ptr_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.ptr_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtr_operator([NotNull] FunctionParser.Ptr_operatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.class_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_def([NotNull] FunctionParser.Class_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.class_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_def([NotNull] FunctionParser.Class_defContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd_expression([NotNull] FunctionParser.And_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd_expression([NotNull] FunctionParser.And_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.template_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplate_param_list([NotNull] FunctionParser.Template_param_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.template_param_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplate_param_list([NotNull] FunctionParser.Template_param_listContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.declByType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclByType([NotNull] FunctionParser.DeclByTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.declByType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclByType([NotNull] FunctionParser.DeclByTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctionParser.sizeof_operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeof_operand([NotNull] FunctionParser.Sizeof_operandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctionParser.sizeof_operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeof_operand([NotNull] FunctionParser.Sizeof_operandContext context);
}
} // namespace myAntlr
